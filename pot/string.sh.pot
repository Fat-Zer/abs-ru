# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-07-07 18:29+0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: abs-guide/string.sh:2
#, no-wrap
msgid "#!/bin/bash\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:9
#, no-wrap
msgid ""
"# string.bash --- bash emulation of string(3) library routines\n"
"# Author: Noah Friedman &lt;friedman@prep.ai.mit.edu&gt;\n"
"# ==>     Used with his kind permission in this document.\n"
"# Created: 1992-07-01\n"
"# Last modified: 1993-09-29\n"
"# Public domain\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:11
#, no-wrap
msgid "# Conversion to bash v2 syntax done by Chet Ramey\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:14
#, no-wrap
msgid ""
"# Commentary:\n"
"# Code:\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:28
#, no-wrap
msgid ""
"#:docstring strcat:\n"
"# Usage: strcat s1 s2\n"
"#\n"
"# Strcat appends the value of variable s2 to variable s1. \n"
"#\n"
"# Example:\n"
"#    a=\"foo\"\n"
"#    b=\"bar\"\n"
"#    strcat a b\n"
"#    echo $a\n"
"#    => foobar\n"
"#\n"
"#:end docstring:\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:33
#, no-wrap
msgid ""
"###;;;autoload   ==> Autoloading of function commented out.\n"
"function strcat ()\n"
"{\n"
"    local s1_val s2_val\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:40
#, no-wrap
msgid ""
"    s1_val=${!1}                        # indirect variable expansion\n"
"    s2_val=${!2}\n"
"    eval \"$1\"=\\'\"${s1_val}${s2_val}\"\\'\n"
"    # ==> eval $1='${s1_val}${s2_val}' avoids problems,\n"
"    # ==> if one of the variables contains a single quote.\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:56
#, no-wrap
msgid ""
"#:docstring strncat:\n"
"# Usage: strncat s1 s2 $n\n"
"# \n"
"# Line strcat, but strncat appends a maximum of n characters from the "
"value\n"
"# of variable s2.  It copies fewer if the value of variabl s2 is shorter\n"
"# than n characters.  Echoes result on stdout.\n"
"#\n"
"# Example:\n"
"#    a=foo\n"
"#    b=barbaz\n"
"#    strncat a b 3\n"
"#    echo $a\n"
"#    => foobar\n"
"#\n"
"#:end docstring:\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:64
#, no-wrap
msgid ""
"###;;;autoload\n"
"function strncat ()\n"
"{\n"
"    local s1=\"$1\"\n"
"    local s2=\"$2\"\n"
"    local -i n=\"$3\"\n"
"    local s1_val s2_val\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:67
#, no-wrap
msgid ""
"    s1_val=${!s1}                       # ==> indirect variable expansion\n"
"    s2_val=${!s2}\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:71
#, no-wrap
msgid ""
"    if [ ${#s2_val} -gt ${n} ]; then\n"
"       s2_val=${s2_val:0:$n}            # ==> substring extraction\n"
"    fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:76
#, no-wrap
msgid ""
"    eval \"$s1\"=\\'\"${s1_val}${s2_val}\"\\'\n"
"    # ==> eval $1='${s1_val}${s2_val}' avoids problems,\n"
"    # ==> if one of the variables contains a single quote.\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:84
#, no-wrap
msgid ""
"#:docstring strcmp:\n"
"# Usage: strcmp $s1 $s2\n"
"#\n"
"# Strcmp compares its arguments and returns an integer less than, equal "
"to,\n"
"# or greater than zero, depending on whether string s1 is "
"lexicographically\n"
"# less than, equal to, or greater than string s2.\n"
"#:end docstring:\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:89
#, no-wrap
msgid ""
"###;;;autoload\n"
"function strcmp ()\n"
"{\n"
"    [ \"$1\" = \"$2\" ] &amp;&amp; return 0\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:91
#, no-wrap
msgid "    [ \"${1}\" '&lt;' \"${2}\" ] > /dev/null &amp;&amp; return -1\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:94
#, no-wrap
msgid ""
"    return 1\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:101
#, no-wrap
msgid ""
"#:docstring strncmp:\n"
"# Usage: strncmp $s1 $s2 $n\n"
"# \n"
"# Like strcmp, but makes the comparison by examining a maximum of n\n"
"# characters (n less than or equal to zero yields equality).\n"
"#:end docstring:\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:108
#, no-wrap
msgid ""
"###;;;autoload\n"
"function strncmp ()\n"
"{\n"
"    if [ -z \"${3}\" -o \"${3}\" -le \"0\" ]; then\n"
"       return 0\n"
"    fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:119
#, no-wrap
msgid ""
"    if [ ${3} -ge ${#1} -a ${3} -ge ${#2} ]; then\n"
"       strcmp \"$1\" \"$2\"\n"
"       return $?\n"
"    else\n"
"       s1=${1:0:$3}\n"
"       s2=${2:0:$3}\n"
"       strcmp $s1 $s2\n"
"       return $?\n"
"    fi\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:125
#, no-wrap
msgid ""
"#:docstring strlen:\n"
"# Usage: strlen s\n"
"#\n"
"# Strlen returns the number of characters in string literal s.\n"
"#:end docstring:\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:133
#, no-wrap
msgid ""
"###;;;autoload\n"
"function strlen ()\n"
"{\n"
"    eval echo \"\\${#${1}}\"\n"
"    # ==> Returns the length of the value of the variable\n"
"    # ==> whose name is passed as an argument.\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:140
#, no-wrap
msgid ""
"#:docstring strspn:\n"
"# Usage: strspn $s1 $s2\n"
"# \n"
"# Strspn returns the length of the maximum initial segment of string s1,\n"
"# which consists entirely of characters from string s2.\n"
"#:end docstring:\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:147
#, no-wrap
msgid ""
"###;;;autoload\n"
"function strspn ()\n"
"{\n"
"    # Unsetting IFS allows whitespace to be handled as normal chars. \n"
"    local IFS=\n"
"    local result=\"${1%%[!${2}]*}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:150 abs-guide/string.sh:167
#, no-wrap
msgid ""
"    echo ${#result}\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:157
#, no-wrap
msgid ""
"#:docstring strcspn:\n"
"# Usage: strcspn $s1 $s2\n"
"#\n"
"# Strcspn returns the length of the maximum initial segment of string s1,\n"
"# which consists entirely of characters not from string s2.\n"
"#:end docstring:\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:164
#, no-wrap
msgid ""
"###;;;autoload\n"
"function strcspn ()\n"
"{\n"
"    # Unsetting IFS allows whitspace to be handled as normal chars. \n"
"    local IFS=\n"
"    local result=\"${1%%[${2}]*}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:175
#, no-wrap
msgid ""
"#:docstring strstr:\n"
"# Usage: strstr s1 s2\n"
"# \n"
"# Strstr echoes a substring starting at the first occurrence of string s2 "
"in\n"
"# string s1, or nothing if s2 does not occur in the string.  If s2 points "
"to\n"
"# a string of zero length, strstr echoes s1.\n"
"#:end docstring:\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:181
#, no-wrap
msgid ""
"###;;;autoload\n"
"function strstr ()\n"
"{\n"
"    # if s2 points to a string of zero length, strstr echoes s1\n"
"    [ ${#2} -eq 0 ] &amp;&amp; { echo \"$1\" ; return 0; }\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:187
#, no-wrap
msgid ""
"    # strstr echoes nothing if s2 does not occur in s1\n"
"    case \"$1\" in\n"
"    *$2*) ;;\n"
"    *) return 1;;\n"
"    esac\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:191
#, no-wrap
msgid ""
"    # use the pattern matching code to strip off the match and everything\n"
"    # following it\n"
"    first=${1/$2*/}\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:195
#, no-wrap
msgid ""
"    # then strip off the first unmatched portion of the string\n"
"    echo \"${1##$first}\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:210
#, no-wrap
msgid ""
"#:docstring strtok:\n"
"# Usage: strtok s1 s2\n"
"#\n"
"# Strtok considers the string s1 to consist of a sequence of zero or more\n"
"# text tokens separated by spans of one or more characters from the\n"
"# separator string s2.  The first call (with a non-empty string s1\n"
"# specified) echoes a string consisting of the first token on stdout. The\n"
"# function keeps track of its position in the string s1 between separate\n"
"# calls, so that subsequent calls made with the first argument an empty\n"
"# string will work through the string immediately following that token.  "
"In\n"
"# this way subsequent calls will work through the string s1 until no "
"tokens\n"
"# remain.  The separator string s2 may be different from call to call.\n"
"# When no token remains in s1, an empty value is echoed on stdout.\n"
"#:end docstring:\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:216
#, no-wrap
msgid ""
"###;;;autoload\n"
"function strtok ()\n"
"{\n"
" :\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:223
#, no-wrap
msgid ""
"#:docstring strtrunc:\n"
"# Usage: strtrunc $n $s1 {$s2} {$...}\n"
"#\n"
"# Used by many functions like strncmp to truncate arguments for "
"comparison.\n"
"# Echoes the first n characters of each string s1 s2 ... on stdout. \n"
"#:end docstring:\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:232
#, no-wrap
msgid ""
"###;;;autoload\n"
"function strtrunc ()\n"
"{\n"
"    n=$1 ; shift\n"
"    for z; do\n"
"        echo \"${z:0:$n}\"\n"
"    done\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:234
#, no-wrap
msgid "# provide string\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:236
#, no-wrap
msgid "# string.bash ends here\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:240
#, no-wrap
msgid ""
"# ========================================================================== "
"#\n"
"# ==> Everything below here added by the document author.\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:243
#, no-wrap
msgid ""
"# ==> Suggested use of this script is to delete everything below here,\n"
"# ==> and \"source\" this file into your own scripts.\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:254
#, no-wrap
msgid ""
"# strcat\n"
"string0=one\n"
"string1=two\n"
"echo\n"
"echo \"Testing \\\"strcat\\\" function:\"\n"
"echo \"Original \\\"string0\\\" = $string0\"\n"
"echo \"\\\"string1\\\" = $string1\"\n"
"strcat string0 string1\n"
"echo \"New \\\"string0\\\" = $string0\"\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:263
#, no-wrap
msgid ""
"# strlen\n"
"echo\n"
"echo \"Testing \\\"strlen\\\" function:\"\n"
"str=123456789\n"
"echo \"\\\"str\\\" = $str\"\n"
"echo -n \"Length of \\\"str\\\" = \"\n"
"strlen str\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:269
#, no-wrap
msgid ""
"# Exercise:\n"
"# --------\n"
"# Add code to test all the other string functions above.\n"
msgstr ""

#. type: Plain text
#: abs-guide/string.sh:271
#, no-wrap
msgid "exit 0\n"
msgstr ""
