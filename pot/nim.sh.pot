# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the abs-guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abs-guide 10\n"
"Report-Msgid-Bugs-To: https://github.com/Fat-Zer/abs-ru/issues\n"
"POT-Creation-Date: 2014-07-07 23:03+0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: abs-guide/nim.sh:3
#, no-wrap
msgid ""
"#!/bin/bash\n"
"# nim.sh: Game of Nim\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:7
#, no-wrap
msgid ""
"# Author: Mendel Cooper\n"
"# Reldate: 15 July 2008\n"
"# License: GPL3\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:16
#, no-wrap
msgid ""
"ROWS=5     # Five rows of pegs (or matchsticks).\n"
"WON=91     # Exit codes to keep track of wins/losses.\n"
"LOST=92    # Possibly useful if running in batch mode.  \n"
"QUIT=99\n"
"peg_msg=   # Peg/Pegs?\n"
"Rows=( 0 5 4 3 2 1 )   # Array holding play info.\n"
"# ${Rows[0]} holds total number of pegs, updated after each turn.\n"
"# Other array elements hold number of pegs in corresponding row.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:23
#, no-wrap
msgid ""
"instructions ()\n"
"{\n"
"  clear\n"
"  tput bold\n"
"  echo \"Welcome to the game of Nim.\"; echo\n"
"  echo -n \"Do you need instructions? (y/n) \"; read ans\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:28
#, no-wrap
msgid ""
"   if [ \"$ans\" = \"y\" -o \"$ans\" = \"Y\" ]; then\n"
"     clear\n"
"     echo -e '\\E[33;41m'  # Yellow fg., over red bg.; bold.\n"
"     cat &lt;&lt;INSTRUCTIONS\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:31
#, no-wrap
msgid ""
"Nim is a game with roots in the distant past.\n"
"This particular variant starts with five rows of pegs.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:37
#, no-wrap
msgid ""
"1:    | | | | | \n"
"2:     | | | | \n"
"3:      | | | \n"
"4:       | | \n"
"5:        | \n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:39
#, no-wrap
msgid "The number at the left identifies the row.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:45
#, no-wrap
msgid ""
"The human player moves first, and alternates turns with the bot.\n"
"A turn consists of removing at least one peg from a single row.\n"
"It is permissable to remove ALL the pegs from a row.\n"
"For example, in row 2, above, the player can remove 1, 2, 3, or 4 pegs.\n"
"The player who removes the last peg loses.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:48
#, no-wrap
msgid ""
"The strategy consists of trying to be the one who removes\n"
"the next-to-last peg(s), leaving the loser with the final peg.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:51
#, no-wrap
msgid ""
"To exit the game early, hit ENTER during your turn.\n"
"INSTRUCTIONS\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:53
#, no-wrap
msgid "echo; echo -n \"Hit ENTER to begin game. \"; read azx\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:57
#, no-wrap
msgid ""
"      echo -e \"\\033[0m\"    # Restore display.\n"
"      else tput sgr0; clear\n"
"  fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:59
#, no-wrap
msgid "clear\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:61 abs-guide/nim.sh:248
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:68
#, no-wrap
msgid ""
"tally_up ()\n"
"{\n"
"  let \"Rows[0] = ${Rows[1]} + ${Rows[2]} + ${Rows[3]} + ${Rows[4]} + \\\n"
"  ${Rows[5]}\"    # Add up how many pegs remaining.\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:74
#, no-wrap
msgid ""
"display ()\n"
"{\n"
"  index=1   # Start with top row.\n"
"  echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:79
#, no-wrap
msgid ""
"  while [ \"$index\" -le \"$ROWS\" ]\n"
"  do\n"
"    p=${Rows[index]}\n"
"    echo -n \"$index:   \"          # Show row number.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:82
#, no-wrap
msgid ""
"  # ------------------------------------------------\n"
"  # Two concurrent inner loops.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:89
#, no-wrap
msgid ""
"      indent=$index\n"
"      while [ \"$indent\" -gt 0 ]\n"
"      do\n"
"        echo -n \" \"               # Staggered rows.\n"
"        ((indent--))              # Spacing between pegs.\n"
"      done\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:96
#, no-wrap
msgid ""
"    while [ \"$p\" -gt 0 ]\n"
"    do\n"
"      echo -n \"| \"\n"
"      ((p--))\n"
"    done\n"
"  # -----------------------------------------------\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:100
#, no-wrap
msgid ""
"  echo\n"
"  ((index++))\n"
"  done  \n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:102
#, no-wrap
msgid "  tally_up\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:104
#, no-wrap
msgid "  rp=${Rows[0]}\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:113
#, no-wrap
msgid ""
"  if [ \"$rp\" -eq 1 ]\n"
"  then\n"
"    peg_msg=peg\n"
"    final_msg=\"Game over.\"\n"
"  else             # Game not yet over . . .\n"
"    peg_msg=pegs\n"
"    final_msg=\"\"   # . . . So \"final message\" is blank.\n"
"  fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:116
#, no-wrap
msgid ""
"  echo \"      $rp $peg_msg remaining.\"\n"
"  echo \"      \"$final_msg\"\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:120
#, no-wrap
msgid ""
"  echo\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:123
#, no-wrap
msgid ""
"player_move ()\n"
"{\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:125
#, no-wrap
msgid "  echo \"Your move:\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:129
#, no-wrap
msgid ""
"  echo -n \"Which row? \"\n"
"  while read idx\n"
"  do                   # Validity check, etc.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:136
#, no-wrap
msgid ""
"    if [ -z \"$idx\" ]   # Hitting return quits.\n"
"    then\n"
"        echo \"Premature exit.\"; echo\n"
"        tput sgr0      # Restore display.\n"
"        exit $QUIT\n"
"    fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:148
#, no-wrap
msgid ""
"    if [ \"$idx\" -gt \"$ROWS\" -o \"$idx\" -lt 1 ]   # Bounds check.\n"
"    then\n"
"      echo \"Invalid row number!\"\n"
"      echo -n \"Which row? \"\n"
"    else\n"
"      break\n"
"    fi\n"
"    # TODO:\n"
"    # Add check for non-numeric input.\n"
"    # Also, script crashes on input outside of range of long double.\n"
"    # Fix this.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:150
#, no-wrap
msgid "  done\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:154
#, no-wrap
msgid ""
"  echo -n \"Remove how many? \"\n"
"  while read num\n"
"  do                   # Validity check.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:161
#, no-wrap
msgid ""
"  if [ -z \"$num\" ]\n"
"  then\n"
"    echo \"Premature exit.\"; echo\n"
"    tput sgr0          # Restore display.\n"
"    exit $QUIT\n"
"  fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:174
#, no-wrap
msgid ""
"    if [ \"$num\" -gt ${Rows[idx]} -o \"$num\" -lt 1 ]\n"
"    then\n"
"      echo \"Cannot remove $num!\"\n"
"      echo -n \"Remove how many? \"\n"
"    else\n"
"      break\n"
"    fi\n"
"  done\n"
"  # TODO:\n"
"  # Add check for non-numeric input.\n"
"  # Also, script crashes on input outside of range of long double.\n"
"  # Fix this.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:176
#, no-wrap
msgid "  let \"Rows[idx] -= $num\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:179 abs-guide/nim.sh:239
#, no-wrap
msgid ""
"  display\n"
"  tally_up\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:188
#, no-wrap
msgid ""
"  if [ ${Rows[0]} -eq 1 ]\n"
"  then\n"
"   echo \"      Human wins!\"\n"
"   echo \"      Congratulations!\"\n"
"   tput sgr0   # Restore display.\n"
"   echo\n"
"   exit $WON\n"
"  fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:199
#, no-wrap
msgid ""
"  if [ ${Rows[0]} -eq 0 ]\n"
"  then          # Snatching defeat from the jaws of victory . . .\n"
"    echo \"      Fool!\"\n"
"    echo \"      You just removed the last peg!\"\n"
"    echo \"      Bot wins!\"\n"
"    tput sgr0   # Restore display.\n"
"    echo\n"
"    exit $LOST\n"
"  fi\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:203
#, no-wrap
msgid ""
"bot_move ()\n"
"{\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:210
#, no-wrap
msgid ""
"  row_b=0\n"
"  while [[ $row_b -eq 0 || ${Rows[row_b]} -eq 0 ]]\n"
"  do\n"
"    row_b=$RANDOM          # Choose random row.\n"
"    let \"row_b %= $ROWS\"\n"
"  done\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:214
#, no-wrap
msgid ""
"  num_b=0\n"
"  r0=${Rows[row_b]}\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:223
#, no-wrap
msgid ""
"  if [ \"$r0\" -eq 1 ]\n"
"  then\n"
"    num_b=1\n"
"  else\n"
"    let \"num_b = $r0 - 1\"\n"
"         #  Leave only a single peg in the row.\n"
"  fi     #  Not a very strong strategy,\n"
"         #+ but probably a bit better than totally random.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:227
#, no-wrap
msgid ""
"  let \"Rows[row_b] -= $num_b\"\n"
"  echo -n \"Bot:  \"\n"
"  echo \"Removing from row $row_b ... \"\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:234
#, no-wrap
msgid ""
"  if [ \"$num_b\" -eq 1 ]\n"
"  then\n"
"    peg_msg=peg\n"
"  else\n"
"    peg_msg=pegs\n"
"  fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:236
#, no-wrap
msgid "  echo \"      $num_b $peg_msg.\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:246
#, no-wrap
msgid ""
"  if [ ${Rows[0]} -eq 1 ]\n"
"  then\n"
"   echo \"      Bot wins!\"\n"
"   tput sgr0   # Restore display.\n"
"   exit $WON\n"
"  fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:254
#, no-wrap
msgid ""
"# ================================================== #\n"
"instructions     # If human player needs them . . .\n"
"tput bold        # Bold characters for easier viewing.\n"
"display          # Show game board.\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:261
#, no-wrap
msgid ""
"while [ true ]   # Main loop.\n"
"do               # Alternate human and bot turns.\n"
"  player_move\n"
"  bot_move\n"
"done\n"
"# ================================================== #\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:268
#, no-wrap
msgid ""
"# Exercise:\n"
"# --------\n"
"# Improve the bot's strategy.\n"
"# There is, in fact, a Nim strategy that can force a win.\n"
"# See the Wikipedia article on Nim:  http://en.wikipedia.org/wiki/Nim\n"
"# Recode the bot to use this strategy (rather difficult).\n"
msgstr ""

#. type: Plain text
#: abs-guide/nim.sh:275
#, no-wrap
msgid ""
"#  Curiosities:\n"
"#  -----------\n"
"#  Nim played a prominent role in Alain Resnais' 1961 New Wave film,\n"
"#+ Last Year at Marienbad.\n"
"#\n"
"#  In 1978, Leo Christopherson wrote an animated version of Nim,\n"
"#+ Android Nim, for the TRS-80 Model I.\n"
msgstr ""
