# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-07-06 22:38+0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: abs-guide/empty-array.sh:3
msgid "#!/bin/bash # empty-array.sh"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:7
msgid ""
"# Thanks to Stephane Chazelas for the original example, #+ and to Michael "
"Zick and Omair Eshkenazi, for extending it.  # And to Nathan Coulter for "
"clarifications and corrections."
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:10
msgid "# An empty array is not the same as an array with empty elements."
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:15
#, no-wrap
msgid ""
"  array0=( first second third )\n"
"  array1=( '' )   # \"array1\" consists of one empty element.\n"
"  array2=( )      # No elements . . . \"array2\" is empty.\n"
"  array3=(   )    # What about this array?\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:36
msgid ""
"echo ListArray()  { echo echo \"Elements in array0: ${array0[@]}\" echo "
"\"Elements in array1: ${array1[@]}\" echo \"Elements in array2: "
"${array2[@]}\" echo \"Elements in array3: ${array3[@]}\" echo echo \"Length "
"of first element in array0 = ${#array0}\" echo \"Length of first element in "
"array1 = ${#array1}\" echo \"Length of first element in array2 = "
"${#array2}\" echo \"Length of first element in array3 = ${#array3}\" echo "
"echo \"Number of elements in array0 = ${#array0[*]}\" # 3 echo \"Number of "
"elements in array1 = ${#array1[*]}\" # 1 (Surprise!)  echo \"Number of "
"elements in array2 = ${#array2[*]}\" # 0 echo \"Number of elements in array3 "
"= ${#array3[*]}\" # 0 }"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:38
msgid "# ==================================================================="
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:40 abs-guide/empty-array.sh:50 abs-guide/empty-array.sh:58 abs-guide/empty-array.sh:74
msgid "ListArray"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:42
msgid "# Try extending those arrays."
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:48
msgid ""
"# Adding an element to an array.  array0=( \"${array0[@]}\" \"new1\" )  "
"array1=( \"${array1[@]}\" \"new1\" )  array2=( \"${array2[@]}\" \"new1\" )  "
"array3=( \"${array3[@]}\" \"new1\" )"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:56
msgid ""
"# or array0[${#array0[*]}]=\"new2\" array1[${#array1[*]}]=\"new2\" "
"array2[${#array2[*]}]=\"new2\" array3[${#array3[*]}]=\"new2\""
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:65
msgid ""
"# When extended as above, arrays are 'stacks' ...  # Above is the 'push' "
"...  # The stack 'height' is: height=${#array2[@]} echo echo \"Stack height "
"for array2 = $height\""
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:72
#, no-wrap
msgid ""
"# The 'pop' is:\n"
"unset array2[${#array2[@]}-1]   #  Arrays are zero-based,\n"
"height=${#array2[@]}            #+ which means first element has index 0.\n"
"echo\n"
"echo \"POP\"\n"
"echo \"New stack height for array2 = $height\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:81
#, no-wrap
msgid ""
"# List only 2nd and 3rd elements of array0.\n"
"from=1\t\t    # Zero-based numbering.\n"
"to=2\n"
"array3=( ${array0[@]:1:2} )\n"
"echo\n"
"echo \"Elements in array3:  ${array3[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:84
msgid ""
"# Works like a string (array of characters).  # Try some other \"string\" "
"forms."
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:89
msgid ""
"# Replacement: array4=( ${array0[@]/second/2nd} )  echo echo \"Elements in "
"array4: ${array4[@]}\""
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:94
msgid ""
"# Replace all matching wildcarded string.  array5=( ${array0[@]//new?/old} )  "
"echo echo \"Elements in array5: ${array5[@]}\""
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:99
msgid ""
"# Just when you are getting the feel for this . . .  array6=( "
"${array0[@]#*new} )  echo # This one might surprise you.  echo \"Elements in "
"array6: ${array6[@]}\""
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:103
msgid ""
"array7=( ${array0[@]#new1} )  echo # After array6 this should not be a "
"surprise.  echo \"Elements in array7: ${array7[@]}\""
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:108
msgid ""
"# Which looks a lot like . . .  array8=( ${array0[@]/new1/} )  echo echo "
"\"Elements in array8: ${array8[@]}\""
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:110
msgid "# So what can one say about this?"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:117
msgid ""
"# The string operations are performed on #+ each of the elements in var[@] "
"in succession.  # Therefore : Bash supports string vector operations.  # If "
"the result is a zero length string, #+ that element disappears in the "
"resulting assignment.  # However, if the expansion is in quotes, the null "
"elements remain."
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:124
#, no-wrap
msgid ""
"#  Michael Zick:    Question, are those strings hard or soft quotes?\n"
"#  Nathan Coulter:  There is no such thing as \"soft quotes.\"\n"
"#!    What's really happening is that\n"
"#!+   the pattern matching happens after\n"
"#!+   all the other expansions of [word]\n"
"#!+   in cases like ${parameter#word}.\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:134
msgid ""
"zap='new*' array9=( ${array0[@]/$zap/} )  echo echo \"Number of elements in "
"array9: ${#array9[@]}\" array9=( \"${array0[@]/$zap/}\" )  echo \"Elements "
"in array9: ${array9[@]}\" # This time the null elements remain.  echo "
"\"Number of elements in array9: ${#array9[@]}\""
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:146
msgid ""
"# Just when you thought you were still in Kansas . . .  array10=( "
"${array0[@]#$zap} )  echo echo \"Elements in array10: ${array10[@]}\" # But, "
"the asterisk in zap won't be interpreted if quoted.  array10=( "
"${array0[@]#\"$zap\"} )  echo echo \"Elements in array10: ${array10[@]}\" # "
"Well, maybe we _are_ still in Kansas . . .  # (Revisions to above code block "
"by Nathan Coulter.)"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:150
msgid "# Compare array7 with array10.  # Compare array8 with array9."
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:156
msgid ""
"# Reiterating: No such thing as soft quotes! # Nathan Coulter explains: # "
"Pattern matching of 'word' in ${parameter#word} is done after #+ parameter "
"expansion and *before* quote removal.  # In the normal case, pattern "
"matching is done *after* quote removal."
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:157
msgid "exit"
msgstr ""
