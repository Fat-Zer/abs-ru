# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the abs-guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abs-guide 10\n"
"Report-Msgid-Bugs-To: https://github.com/Fat-Zer/abs-ru/issues\n"
"POT-Creation-Date: 2014-07-07 23:01+0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: abs-guide/empty-array.sh:3
#, no-wrap
msgid ""
"#!/bin/bash\n"
"# empty-array.sh\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:7
#, no-wrap
msgid ""
"#  Thanks to Stephane Chazelas for the original example,\n"
"#+ and to Michael Zick and Omair Eshkenazi, for extending it.\n"
"#  And to Nathan Coulter for clarifications and corrections.\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:10
#, no-wrap
msgid "# An empty array is not the same as an array with empty elements.\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:15
#, no-wrap
msgid ""
"  array0=( first second third )\n"
"  array1=( '' )   # \"array1\" consists of one empty element.\n"
"  array2=( )      # No elements . . . \"array2\" is empty.\n"
"  array3=(   )    # What about this array?\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:36
#, no-wrap
msgid ""
"echo\n"
"ListArray()\n"
"{\n"
"echo\n"
"echo \"Elements in array0:  ${array0[@]}\"\n"
"echo \"Elements in array1:  ${array1[@]}\"\n"
"echo \"Elements in array2:  ${array2[@]}\"\n"
"echo \"Elements in array3:  ${array3[@]}\"\n"
"echo\n"
"echo \"Length of first element in array0 = ${#array0}\"\n"
"echo \"Length of first element in array1 = ${#array1}\"\n"
"echo \"Length of first element in array2 = ${#array2}\"\n"
"echo \"Length of first element in array3 = ${#array3}\"\n"
"echo\n"
"echo \"Number of elements in array0 = ${#array0[*]}\"  # 3\n"
"echo \"Number of elements in array1 = ${#array1[*]}\"  # 1  (Surprise!)\n"
"echo \"Number of elements in array2 = ${#array2[*]}\"  # 0\n"
"echo \"Number of elements in array3 = ${#array3[*]}\"  # 0\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:38
#, no-wrap
msgid "# ===================================================================\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:40 abs-guide/empty-array.sh:50
#: abs-guide/empty-array.sh:58 abs-guide/empty-array.sh:74
#, no-wrap
msgid "ListArray\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:42
#, no-wrap
msgid "# Try extending those arrays.\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:48
#, no-wrap
msgid ""
"# Adding an element to an array.\n"
"array0=( \"${array0[@]}\" \"new1\" )\n"
"array1=( \"${array1[@]}\" \"new1\" )\n"
"array2=( \"${array2[@]}\" \"new1\" )\n"
"array3=( \"${array3[@]}\" \"new1\" )\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:56
#, no-wrap
msgid ""
"# or\n"
"array0[${#array0[*]}]=\"new2\"\n"
"array1[${#array1[*]}]=\"new2\"\n"
"array2[${#array2[*]}]=\"new2\"\n"
"array3[${#array3[*]}]=\"new2\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:65
#, no-wrap
msgid ""
"# When extended as above, arrays are 'stacks' ...\n"
"# Above is the 'push' ...\n"
"# The stack 'height' is:\n"
"height=${#array2[@]}\n"
"echo\n"
"echo \"Stack height for array2 = $height\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:72
#, no-wrap
msgid ""
"# The 'pop' is:\n"
"unset array2[${#array2[@]}-1]   #  Arrays are zero-based,\n"
"height=${#array2[@]}            #+ which means first element has index 0.\n"
"echo\n"
"echo \"POP\"\n"
"echo \"New stack height for array2 = $height\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:81
#, no-wrap
msgid ""
"# List only 2nd and 3rd elements of array0.\n"
"from=1\t\t    # Zero-based numbering.\n"
"to=2\n"
"array3=( ${array0[@]:1:2} )\n"
"echo\n"
"echo \"Elements in array3:  ${array3[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:84
#, no-wrap
msgid ""
"# Works like a string (array of characters).\n"
"# Try some other \"string\" forms.\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:89
#, no-wrap
msgid ""
"# Replacement:\n"
"array4=( ${array0[@]/second/2nd} )\n"
"echo\n"
"echo \"Elements in array4:  ${array4[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:94
#, no-wrap
msgid ""
"# Replace all matching wildcarded string.\n"
"array5=( ${array0[@]//new?/old} )\n"
"echo\n"
"echo \"Elements in array5:  ${array5[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:99
#, no-wrap
msgid ""
"# Just when you are getting the feel for this . . .\n"
"array6=( ${array0[@]#*new} )\n"
"echo # This one might surprise you.\n"
"echo \"Elements in array6:  ${array6[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:103
#, no-wrap
msgid ""
"array7=( ${array0[@]#new1} )\n"
"echo # After array6 this should not be a surprise.\n"
"echo \"Elements in array7:  ${array7[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:108
#, no-wrap
msgid ""
"# Which looks a lot like . . .\n"
"array8=( ${array0[@]/new1/} )\n"
"echo\n"
"echo \"Elements in array8:  ${array8[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:110
#, no-wrap
msgid "#  So what can one say about this?\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:117
#, no-wrap
msgid ""
"#  The string operations are performed on\n"
"#+ each of the elements in var[@] in succession.\n"
"#  Therefore : Bash supports string vector operations.\n"
"#  If the result is a zero length string,\n"
"#+ that element disappears in the resulting assignment.\n"
"#  However, if the expansion is in quotes, the null elements remain.\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:124
#, no-wrap
msgid ""
"#  Michael Zick:    Question, are those strings hard or soft quotes?\n"
"#  Nathan Coulter:  There is no such thing as \"soft quotes.\"\n"
"#!    What's really happening is that\n"
"#!+   the pattern matching happens after\n"
"#!+   all the other expansions of [word]\n"
"#!+   in cases like ${parameter#word}.\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:134
#, no-wrap
msgid ""
"zap='new*'\n"
"array9=( ${array0[@]/$zap/} )\n"
"echo\n"
"echo \"Number of elements in array9:  ${#array9[@]}\"\n"
"array9=( \"${array0[@]/$zap/}\" )\n"
"echo \"Elements in array9:  ${array9[@]}\"\n"
"# This time the null elements remain.\n"
"echo \"Number of elements in array9:  ${#array9[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:146
#, no-wrap
msgid ""
"# Just when you thought you were still in Kansas . . .\n"
"array10=( ${array0[@]#$zap} )\n"
"echo\n"
"echo \"Elements in array10:  ${array10[@]}\"\n"
"# But, the asterisk in zap won't be interpreted if quoted.\n"
"array10=( ${array0[@]#\"$zap\"} )\n"
"echo\n"
"echo \"Elements in array10:  ${array10[@]}\"\n"
"# Well, maybe we _are_ still in Kansas . . .\n"
"# (Revisions to above code block by Nathan Coulter.)\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:150
#, no-wrap
msgid ""
"#  Compare array7 with array10.\n"
"#  Compare array8 with array9.\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:156
#, no-wrap
msgid ""
"#  Reiterating: No such thing as soft quotes!\n"
"#  Nathan Coulter explains:\n"
"#  Pattern matching of 'word' in ${parameter#word} is done after\n"
"#+ parameter expansion and *before* quote removal.\n"
"#  In the normal case, pattern matching is done *after* quote removal.\n"
msgstr ""

#. type: Plain text
#: abs-guide/empty-array.sh:157
#, no-wrap
msgid "exit\n"
msgstr ""
