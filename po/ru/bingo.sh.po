# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-07-07 18:29+0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: abs-guide/bingo.sh:5
#, no-wrap
msgid ""
"#!/bin/bash\n"
"# bingo.sh\n"
"# Bingo number generator\n"
"# Reldate 20Aug12, License: Public Domain\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:13
#, no-wrap
msgid ""
"#######################################################################\n"
"# This script generates bingo numbers.\n"
"# Hitting a key generates a new number.\n"
"# Hitting 'q' terminates the script.\n"
"# In a given run of the script, there will be no duplicate numbers.\n"
"# When the script terminates, it prints a log of the numbers generated.\n"
"#######################################################################\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:18
#, no-wrap
msgid ""
"MIN=1       # Lowest allowable bingo number.\n"
"MAX=75      # Highest allowable bingo number.\n"
"COLS=15     # Numbers in each column (B I N G O).\n"
"SINGLE_DIGIT_MAX=9\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:21
#, no-wrap
msgid ""
"declare -a Numbers\n"
"Prefix=(B I N G O)\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:31
#, no-wrap
msgid ""
"initialize_Numbers ()\n"
"{  # Zero them out to start.\n"
"   # They'll be incremented if chosen.\n"
"   local index=0\n"
"   until [ \"$index\" -gt $MAX ]\n"
"   do\n"
"     Numbers[index]=0\n"
"     ((index++))\n"
"   done\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:34
#, no-wrap
msgid ""
"   Numbers[0]=1   # Flag zero, so it won't be selected.\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:39
#, no-wrap
msgid ""
"generate_number ()\n"
"{\n"
"   local number\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:50
#, no-wrap
msgid ""
"   while [ 1 ]\n"
"   do\n"
"     let \"number = $(expr $RANDOM % $MAX)\"\n"
"     if [ ${Numbers[number]} -eq 0 ]    # Number not yet called.\n"
"     then\n"
"       let \"Numbers[number]+=1\"         # Flag it in the array.\n"
"       break                            # And terminate loop.\n"
"     fi   # Else if already called, loop and generate another number.\n"
"   done\n"
"   # Exercise: Rewrite this more elegantly as an until-loop.\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:53
#, no-wrap
msgid ""
"   return $number\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:58
#, no-wrap
msgid ""
"print_numbers_called ()\n"
"{   # Print out the called number log in neat columns.\n"
"    # echo ${Numbers[@]}\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:61
#, no-wrap
msgid ""
"local pre2=0                #  Prefix a zero, so columns will align\n"
"                            #+ on single-digit numbers.\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:63
#, no-wrap
msgid "echo \"Number Stats\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:71
#, no-wrap
msgid ""
"for (( index=1; index&lt;=MAX; index++))\n"
"do\n"
"  count=${Numbers[index]}\n"
"  let \"t = $index - 1\"      # Normalize, since array begins with index "
"0.\n"
"  let \"column = $(expr $t / $COLS)\"\n"
"  pre=${Prefix[column]}\n"
"# echo -n \"${Prefix[column]} \"\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:76
#, no-wrap
msgid ""
"if [ $(expr $t % $COLS) -eq 0 ]\n"
"then\n"
"  echo   # Newline at end of row.\n"
"fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:83
#, no-wrap
msgid ""
"  if [ \"$index\" -gt $SINGLE_DIGIT_MAX ]  # Check for single-digit "
"number.\n"
"  then\n"
"    echo -n \"$pre$index#$count \"\n"
"  else    # Prefix a zero.\n"
"    echo -n \"$pre$pre2$index#$count \"\n"
"  fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:86
#, no-wrap
msgid ""
"done\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:91
#, no-wrap
msgid ""
"# main () {\n"
"RANDOM=$$   # Seed random number generator.\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:93
#, no-wrap
msgid "initialize_Numbers   # Zero out the number tracking array.\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:96
#, no-wrap
msgid ""
"clear\n"
"echo \"Bingo Number Caller\"; echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:103
#, no-wrap
msgid ""
"while [[ \"$key\" != \"q\" ]]   # Main loop.\n"
"do\n"
"  read -s -n1 -p \"Hit a key for the next number [q to exit] \" key\n"
"  # Usually 'q' exits, but not always.\n"
"  # Can always hit Ctl-C if q fails.\n"
"  echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:105
#, no-wrap
msgid "  generate_number; new_number=$?\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:108
#, no-wrap
msgid ""
"  let \"column = $(expr $new_number / $COLS)\"\n"
"  echo -n \"${Prefix[column]} \"   # B-I-N-G-O\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:111
#, no-wrap
msgid ""
"  echo $new_number\n"
"done\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:113
#, no-wrap
msgid "echo; echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:117
#, no-wrap
msgid ""
"# Game over ...\n"
"print_numbers_called\n"
"echo; echo \"[#0 = not called . . . #1 = called]\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:119
#, no-wrap
msgid "echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:122
#, no-wrap
msgid ""
"exit 0\n"
"# }\n"
msgstr ""

#. type: Plain text
#: abs-guide/bingo.sh:126
#, no-wrap
msgid ""
"# Certainly, this script could stand some improvement.\n"
"#See also the author's Instructable:\n"
"#www.instructables.com/id/Binguino-An-Arduino-based-Bingo-Number-Generato/\n"
msgstr ""
