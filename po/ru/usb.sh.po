# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: https://github.com/Fat-Zer/abs-ru/issues\n"
"POT-Creation-Date: 2014-07-07 23:03+0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: abs-guide/usb.sh:9
#, no-wrap
msgid ""
"#!/bin/bash\n"
"# ==> usb.sh\n"
"# ==> Script for mounting and installing pen/keychain USB storage devices.\n"
"# ==> Runs as root at system startup (see below).\n"
"# ==>\n"
"# ==> Newer Linux distros (2004 or later) autodetect\n"
"# ==> and install USB pen drives, and therefore don't need this script.\n"
"# ==> But, it's still instructive.\n"
msgstr ""

#. type: Plain text
#: abs-guide/usb.sh:36
#, no-wrap
msgid ""
"#  This code is free software covered by GNU GPL license version 2 or above.\n"
"#  Please refer to http://www.gnu.org/ for the full license text.\n"
"#\n"
"#  Some code lifted from usb-mount by Michael Hamilton's usb-mount (LGPL)\n"
"#+ see http://users.actrix.co.nz/michael/usbmount.html\n"
"#\n"
"#  INSTALL\n"
"#  -------\n"
"#  Put this in /etc/hotplug/usb/diskonkey.\n"
"#  Then look in /etc/hotplug/usb.distmap, and copy all usb-storage entries\n"
"#+ into /etc/hotplug/usb.usermap, substituting \"usb-storage\" for \"diskonkey\".\n"
"#  Otherwise this code is only run during the kernel module invocation/removal\n"
"#+ (at least in my tests), which defeats the purpose.\n"
"#\n"
"#  TODO\n"
"#  ----\n"
"#  Handle more than one diskonkey device at one time (e.g. /dev/diskonkey1\n"
"#+ and /mnt/diskonkey1), etc. The biggest problem here is the handling in\n"
"#+ devlabel, which I haven't yet tried.\n"
"#\n"
"#  AUTHOR and SUPPORT\n"
"#  ------------------\n"
"#  Konstantin Riabitsev, &lt;icon linux duke edu&gt;.\n"
"#  Send any problem reports to my email address at the moment.\n"
"#\n"
"# ==> Comments added by ABS Guide author.\n"
msgstr ""

#. type: Plain text
#: abs-guide/usb.sh:44
#, no-wrap
msgid ""
"SYMLINKDEV=/dev/diskonkey\n"
"MOUNTPOINT=/mnt/diskonkey\n"
"DEVLABEL=/sbin/devlabel\n"
"DEVLABELCONFIG=/etc/sysconfig/devlabel\n"
"IAM=$0\n"
msgstr ""

#. type: Plain text
#: abs-guide/usb.sh:56
#, no-wrap
msgid ""
"##\n"
"# Functions lifted near-verbatim from usb-mount code.\n"
"#\n"
"function allAttachedScsiUsb {\n"
"  find /proc/scsi/ -path '/proc/scsi/usb-storage*' -type f |\n"
"  xargs grep -l 'Attached: Yes'\n"
"}\n"
"function scsiDevFromScsiUsb {\n"
"  echo $1 | awk -F\"[-/]\" '{ n=$(NF-1);\n"
"  print \"/dev/sd\" substr(\"abcdefghijklmnopqrstuvwxyz\", n+1, 1) }'\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/usb.sh:141
#, no-wrap
msgid ""
"if [ \"${ACTION}\" = \"add\" ] &amp;&amp; [ -f \"${DEVICE}\" ]; then\n"
"    ##\n"
"    # lifted from usbcam code.\n"
"    #\n"
"    if [ -f /var/run/console.lock ]; then\n"
"        CONSOLEOWNER=`cat /var/run/console.lock`\n"
"    elif [ -f /var/lock/console.lock ]; then\n"
"        CONSOLEOWNER=`cat /var/lock/console.lock`\n"
"    else\n"
"        CONSOLEOWNER=\n"
"    fi\n"
"    for procEntry in $(allAttachedScsiUsb); do\n"
"        scsiDev=$(scsiDevFromScsiUsb $procEntry)\n"
"        #  Some bug with usb-storage?\n"
"        #  Partitions are not in /proc/partitions until they are accessed\n"
"        #+ somehow.\n"
"        /sbin/fdisk -l $scsiDev >/dev/null\n"
"        ##\n"
"        #  Most devices have partitioning info, so the data would be on\n"
"        #+ /dev/sd?1. However, some stupider ones don't have any partitioning\n"
"        #+ and use the entire device for data storage. This tries to\n"
"        #+ guess semi-intelligently if we have a /dev/sd?1 and if not, then\n"
"        #+ it uses the entire device and hopes for the better.\n"
"        #\n"
"        if grep -q `basename $scsiDev`1 /proc/partitions; then\n"
"            part=\"$scsiDev\"\"1\"\n"
"        else\n"
"            part=$scsiDev\n"
"        fi\n"
"        ##\n"
"        #  Change ownership of the partition to the console user so they can\n"
"        #+ mount it.\n"
"        #\n"
"        if [ ! -z \"$CONSOLEOWNER\" ]; then\n"
"            chown $CONSOLEOWNER:disk $part\n"
"        fi\n"
"        ##\n"
"        # This checks if we already have this UUID defined with devlabel.\n"
"        # If not, it then adds the device to the list.\n"
"        #\n"
"        prodid=`$DEVLABEL printid -d $part`\n"
"        if ! grep -q $prodid $DEVLABELCONFIG; then\n"
"            # cross our fingers and hope it works\n"
"            $DEVLABEL add -d $part -s $SYMLINKDEV 2>/dev/null\n"
"        fi\n"
"        ##\n"
"        # Check if the mount point exists and create if it doesn't.\n"
"        #\n"
"        if [ ! -e $MOUNTPOINT ]; then\n"
"            mkdir -p $MOUNTPOINT\n"
"        fi\n"
"        ##\n"
"        # Take care of /etc/fstab so mounting is easy.\n"
"        #\n"
"        if ! grep -q \"^$SYMLINKDEV\" /etc/fstab; then\n"
"            # Add an fstab entry\n"
"            echo -e \\\n"
"                \"$SYMLINKDEV\\t\\t$MOUNTPOINT\\t\\tauto\\tnoauto,owner,kudzu 0 0\" \\\n"
"                >> /etc/fstab\n"
"        fi\n"
"    done\n"
"    if [ ! -z \"$REMOVER\" ]; then\n"
"        ##\n"
"        # Make sure this script is triggered on device removal.\n"
"        #\n"
"        mkdir -p `dirname $REMOVER`\n"
"        ln -s $IAM $REMOVER\n"
"    fi\n"
"elif [ \"${ACTION}\" = \"remove\" ]; then\n"
"    ##\n"
"    # If the device is mounted, unmount it cleanly.\n"
"    #\n"
"    if grep -q \"$MOUNTPOINT\" /etc/mtab; then\n"
"        # unmount cleanly\n"
"        umount -l $MOUNTPOINT\n"
"    fi\n"
"    ##\n"
"    # Remove it from /etc/fstab if it's there.\n"
"    #\n"
"    if grep -q \"^$SYMLINKDEV\" /etc/fstab; then\n"
"        grep -v \"^$SYMLINKDEV\" /etc/fstab > /etc/.fstab.new\n"
"        mv -f /etc/.fstab.new /etc/fstab\n"
"    fi\n"
"fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/usb.sh:142
#, no-wrap
msgid "exit 0\n"
msgstr ""
