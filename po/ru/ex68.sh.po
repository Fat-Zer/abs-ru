# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-07-07 18:29+0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: abs-guide/ex68.sh:3
#, no-wrap
msgid ""
"#!/bin/bash\n"
"# sieve.sh (ex68.sh)\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:6
#, no-wrap
msgid ""
"# Sieve of Eratosthenes\n"
"# Ancient algorithm for finding prime numbers.\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:9
#, no-wrap
msgid ""
"#  This runs a couple of orders of magnitude slower\n"
"#+ than the equivalent program written in C.\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:13
#, no-wrap
msgid ""
"LOWER_LIMIT=1       # Starting with 1.\n"
"UPPER_LIMIT=1000    # Up to 1000.\n"
"# (You may set this higher . . . if you have time on your hands.)\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:16
#, no-wrap
msgid ""
"PRIME=1\n"
"NON_PRIME=0\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:20
#, no-wrap
msgid ""
"let SPLIT=UPPER_LIMIT/2\n"
"# Optimization:\n"
"# Need to test numbers only halfway to upper limit. Why?\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:24
#, no-wrap
msgid ""
"declare -a Primes\n"
"# Primes[] is an array.\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:29
#, no-wrap
msgid ""
"initialize ()\n"
"{\n"
"# Initialize the array.\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:39
#, no-wrap
msgid ""
"i=$LOWER_LIMIT\n"
"until [ \"$i\" -gt \"$UPPER_LIMIT\" ]\n"
"do\n"
"  Primes[i]=$PRIME\n"
"  let \"i += 1\"\n"
"done\n"
"#  Assume all array members guilty (prime)\n"
"#+ until proven innocent.\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:43
#, no-wrap
msgid ""
"print_primes ()\n"
"{\n"
"# Print out the members of the Primes[] array tagged as prime.\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:45
#, no-wrap
msgid "i=$LOWER_LIMIT\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:48 abs-guide/ex68.sh:69
#, no-wrap
msgid ""
"until [ \"$i\" -gt \"$UPPER_LIMIT\" ]\n"
"do\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:54
#, no-wrap
msgid ""
"  if [ \"${Primes[i]}\" -eq \"$PRIME\" ]\n"
"  then\n"
"    printf \"%8d\" $i\n"
"    # 8 spaces per number gives nice, even columns.\n"
"  fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:56
#, no-wrap
msgid "  let \"i += 1\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:58
#, no-wrap
msgid "done\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:60 abs-guide/ex68.sh:90
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:63
#, no-wrap
msgid ""
"sift () # Sift out the non-primes.\n"
"{\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:66
#, no-wrap
msgid ""
"let i=$LOWER_LIMIT+1\n"
"# Let's start with 2.\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:73
#, no-wrap
msgid ""
"if [ \"${Primes[i]}\" -eq \"$PRIME\" ]\n"
"# Don't bother sieving numbers already sieved (tagged as non-prime).\n"
"then\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:75
#, no-wrap
msgid "  t=$i\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:82
#, no-wrap
msgid ""
"  while [ \"$t\" -le \"$UPPER_LIMIT\" ]\n"
"  do\n"
"    let \"t += $i \"\n"
"    Primes[t]=$NON_PRIME\n"
"    # Tag as non-prime all multiples.\n"
"  done\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:84
#, no-wrap
msgid "fi  \n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:87
#, no-wrap
msgid ""
"  let \"i += 1\"\n"
"done  \n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:100
#, no-wrap
msgid ""
"# ==============================================\n"
"# main ()\n"
"# Invoke the functions sequentially.\n"
"initialize\n"
"sift\n"
"print_primes\n"
"# This is what they call structured programming.\n"
"# ==============================================\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:102
#, no-wrap
msgid "echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:104
#, no-wrap
msgid "exit 0\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:109
#, no-wrap
msgid ""
"# -------------------------------------------------------- #\n"
"# Code below line will not execute, because of 'exit.'\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:112
#, no-wrap
msgid ""
"#  This improved version of the Sieve, by Stephane Chazelas,\n"
"#+ executes somewhat faster.\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:114
#, no-wrap
msgid "# Must invoke with command-line argument (limit of primes).\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:117
#, no-wrap
msgid ""
"UPPER_LIMIT=$1                  # From command-line.\n"
"let SPLIT=UPPER_LIMIT/2         # Halfway to max number.\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:119
#, no-wrap
msgid "Primes=( '' $(seq $UPPER_LIMIT) )\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:133
#, no-wrap
msgid ""
"i=1\n"
"until (( ( i += 1 ) > SPLIT ))  # Need check only halfway.\n"
"do\n"
"  if [[ -n ${Primes[i]} ]]\n"
"  then\n"
"    t=$i\n"
"    until (( ( t += i ) > UPPER_LIMIT ))\n"
"    do\n"
"      Primes[t]=\n"
"    done\n"
"  fi  \n"
"done  \n"
"echo ${Primes[*]}\n"
msgstr ""

#. type: Plain text
#: abs-guide/ex68.sh:134
#, no-wrap
msgid "exit $?\n"
msgstr ""
