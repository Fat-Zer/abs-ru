# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-07-07 18:29+0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: abs-guide/collatz.sh:3
#, no-wrap
msgid ""
"#!/bin/bash\n"
"# collatz.sh\n"
msgstr ""

#. type: Plain text
#: abs-guide/collatz.sh:22
#, no-wrap
msgid ""
"#  The notorious \"hailstone\" or Collatz series.\n"
"#  -------------------------------------------\n"
"#  1) Get the integer \"seed\" from the command-line.\n"
"#  2) NUMBER &lt;-- seed\n"
"#  3) Print NUMBER.\n"
"#  4)  If NUMBER is even, divide by 2, or\n"
"#  5)+ if odd, multiply by 3 and add 1.\n"
"#  6) NUMBER &lt;-- result \n"
"#  7) Loop back to step 3 (for specified number of iterations).\n"
"#\n"
"#  The theory is that every such sequence,\n"
"#+ no matter how large the initial value,\n"
"#+ eventually settles down to repeating \"4,2,1...\" cycles,\n"
"#+ even after fluctuating through a wide range of values.\n"
"#\n"
"#  This is an instance of an \"iterate,\"\n"
"#+ an operation that feeds its output back into its input.\n"
"#  Sometimes the result is a \"chaotic\" series.\n"
msgstr ""

#. type: Plain text
#: abs-guide/collatz.sh:26
#, no-wrap
msgid ""
"MAX_ITERATIONS=200\n"
"# For large seed numbers (&gt;32000), try increasing MAX_ITERATIONS.\n"
msgstr ""

#. type: Plain text
#: abs-guide/collatz.sh:30
#, no-wrap
msgid ""
"h=${1:-$$}                      #  Seed.\n"
"                                #  Use $PID as seed,\n"
"                                #+ if not specified as command-line arg.\n"
msgstr ""

#. type: Plain text
#: abs-guide/collatz.sh:34
#, no-wrap
msgid ""
"echo\n"
"echo \"C($h) -*- $MAX_ITERATIONS Iterations\"\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/collatz.sh:37
#, no-wrap
msgid ""
"for ((i=1; i&lt;=MAX_ITERATIONS; i++))\n"
"do\n"
msgstr ""

#. type: Plain text
#: abs-guide/collatz.sh:44
#, no-wrap
msgid ""
"# echo -n \"$h\t\"\n"
"#            ^^^ \n"
"#            tab\n"
"# printf does it better ...\n"
"COLWIDTH=%7d\n"
"printf $COLWIDTH $h\n"
msgstr ""

#. type: Plain text
#: abs-guide/collatz.sh:52
#, no-wrap
msgid ""
"  let \"remainder = h % 2\"\n"
"  if [ \"$remainder\" -eq 0 ]   # Even?\n"
"  then\n"
"    let \"h /= 2\"              # Divide by 2.\n"
"  else\n"
"    let \"h = h*3 + 1\"         # Multiply by 3 and add 1.\n"
"  fi\n"
msgstr ""

#. type: Plain text
#: abs-guide/collatz.sh:60
#, no-wrap
msgid ""
"COLUMNS=10                    # Output 10 values per line.\n"
"let \"line_break = i % $COLUMNS\"\n"
"if [ \"$line_break\" -eq 0 ]\n"
"then\n"
"  echo\n"
"fi  \n"
msgstr ""

#. type: Plain text
#: abs-guide/collatz.sh:62
#, no-wrap
msgid "done\n"
msgstr ""

#. type: Plain text
#: abs-guide/collatz.sh:64
#, no-wrap
msgid "echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/collatz.sh:68
#, no-wrap
msgid ""
"#  For more information on this strange mathematical function,\n"
"#+ see _Computers, Pattern, Chaos, and Beauty_, by Pickover, p. 185 ff.,\n"
"#+ as listed in the bibliography.\n"
msgstr ""

#. type: Plain text
#: abs-guide/collatz.sh:69
#, no-wrap
msgid "exit 0\n"
msgstr ""
