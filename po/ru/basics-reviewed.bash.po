# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the abs-guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abs-guide 10\n"
"Report-Msgid-Bugs-To: https://github.com/Fat-Zer/abs-ru/issues\n"
"POT-Creation-Date: 2014-07-07 23:01+0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: abs-guide/basics-reviewed.bash:3
#, no-wrap
msgid ""
"#!/bin/bash\n"
"# basics-reviewed.bash\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:5
#, no-wrap
msgid "# File extension == *.bash == specific to Bash\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:13
#, no-wrap
msgid ""
"#   Copyright (c) Michael S. Zick, 2003; All rights reserved.\n"
"#   License: Use in any form, for any purpose.\n"
"#   Revision: $ID$\n"
"#\n"
"#              Edited for layout by M.C.\n"
"#   (author of the \"Advanced Bash Scripting Guide\")\n"
"#   Fixes and updates (04/08) by Cliff Bamford.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:19
#, no-wrap
msgid ""
"#  This script tested under Bash versions 2.04, 2.05a and 2.05b.\n"
"#  It may not work with earlier versions.\n"
"#  This demonstration script generates one --intentional--\n"
"#+ \"command not found\" error message. See line 436.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:22
#, no-wrap
msgid ""
"#  The current Bash maintainer, Chet Ramey, has fixed the items noted\n"
"#+ for later versions of Bash.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:32
#, no-wrap
msgid ""
"        ###-------------------------------------------###\n"
"        ###  Pipe the output of this script to 'more' ###\n"
"        ###+ else it will scroll off the page.        ###\n"
"        ###                                           ###\n"
"        ###  You may also redirect its output         ###\n"
"        ###+ to a file for examination.               ###  \n"
"        ###-------------------------------------------###\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:39
#, no-wrap
msgid ""
"#  Most of the following points are described at length in\n"
"#+ the text of the foregoing \"Advanced Bash Scripting Guide.\"\n"
"#  This demonstration script is mostly just a reorganized presentation.\n"
"#      -- msz\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:41
#, no-wrap
msgid "# Variables are not typed unless otherwise specified.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:45
#, no-wrap
msgid ""
"#  Variables are named. Names must contain a non-digit.\n"
"#  File descriptor names (as in, for example: 2>&amp;1)\n"
"#+ contain ONLY digits.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:48
#, no-wrap
msgid ""
"# Parameters and Bash array elements are numbered.\n"
"# (Parameters are very similar to Bash arrays.)\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:51
#, no-wrap
msgid ""
"# A variable name may be undefined (null reference).\n"
"unset VarNull\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:54
#, no-wrap
msgid ""
"# A variable name may be defined but empty (null contents).\n"
"VarEmpty=''                         # Two, adjacent, single quotes.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:57
#, no-wrap
msgid ""
"# A variable name may be defined and non-empty.\n"
"VarSomething='Literal'\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:62
#, no-wrap
msgid ""
"# A variable may contain:\n"
"#   * A whole number as a signed 32-bit (or larger) integer\n"
"#   * A string\n"
"# A variable may also be an array.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:65
#, no-wrap
msgid ""
"#  A string may contain embedded blanks and may be treated\n"
"#+ as if it where a function name with optional arguments.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:68
#, no-wrap
msgid ""
"#  The names of variables and the names of functions\n"
"#+ are in different namespaces.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:74
#, no-wrap
msgid ""
"#  A variable may be defined as a Bash array either explicitly or\n"
"#+ implicitly by the syntax of the assignment statement.\n"
"#  Explicit:\n"
"declare -a ArrayVar\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:79
#, no-wrap
msgid ""
"# The echo command is a builtin.\n"
"echo $VarSomething\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:84
#, no-wrap
msgid ""
"# The printf command is a builtin.\n"
"# Translate %s as: String-Format\n"
"printf %s $VarSomething         # No linebreak specified, none output.\n"
"echo                            # Default, only linebreak output.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:91
#, no-wrap
msgid ""
"# The Bash parser word breaks on whitespace.\n"
"# Whitespace, or the lack of it is significant.\n"
"# (This holds true in general; there are, of course, exceptions.)\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:96
#, no-wrap
msgid "# Translate the DOLLAR_SIGN character as: Content-Of.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:99
#, no-wrap
msgid ""
"# Extended-Syntax way of writing Content-Of:\n"
"echo ${VarSomething}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:103
#, no-wrap
msgid ""
"#  The ${ ... } Extended-Syntax allows more than just the variable\n"
"#+ name to be specified.\n"
"#  In general, $VarSomething can always be written as: ${VarSomething}.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:105
#, no-wrap
msgid "# Call this script with arguments to see the following in action.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:111
#, no-wrap
msgid ""
"#  Outside of double-quotes, the special characters @ and *\n"
"#+ specify identical behavior.\n"
"#  May be pronounced as: All-Elements-Of.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:114
#, no-wrap
msgid ""
"#  Without specification of a name, they refer to the\n"
"#+ pre-defined parameter Bash-Array.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:120
#, no-wrap
msgid ""
"# Glob-Pattern references\n"
"echo $*                         # All parameters to script or function\n"
"echo ${*}                       # Same\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:123
#, no-wrap
msgid ""
"# Bash disables filename expansion for Glob-Patterns.\n"
"# Only character matching is active.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:128
#, no-wrap
msgid ""
"# All-Elements-Of references\n"
"echo $@                         # Same as above\n"
"echo ${@}                       # Same as above\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:135
#, no-wrap
msgid ""
"#  Within double-quotes, the behavior of Glob-Pattern references\n"
"#+ depends on the setting of IFS (Input Field Separator).\n"
"#  Within double-quotes, All-Elements-Of references behave the same.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:139
#, no-wrap
msgid ""
"#  Specifying only the name of a variable holding a string refers\n"
"#+ to all elements (characters) of a string.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:143
#, no-wrap
msgid ""
"#  To specify an element (character) of a string,\n"
"#+ the Extended-Syntax reference notation (see below) MAY be used.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:150
#, no-wrap
msgid ""
"#  Specifying only the name of a Bash array references\n"
"#+ the subscript zero element,\n"
"#+ NOT the FIRST DEFINED nor the FIRST WITH CONTENTS element.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:154
#, no-wrap
msgid ""
"#  Additional qualification is needed to reference other elements,\n"
"#+ which means that the reference MUST be written in Extended-Syntax.\n"
"#  The general form is: ${name[subscript]}.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:157
#, no-wrap
msgid ""
"#  The string forms may also be used: ${name:subscript}\n"
"#+ for Bash-Arrays when referencing the subscript zero element.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:161
#, no-wrap
msgid ""
"# Bash-Arrays are implemented internally as linked lists,\n"
"#+ not as a fixed area of storage as in some programming languages.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:165
#, no-wrap
msgid ""
"#   Characteristics of Bash arrays (Bash-Arrays):\n"
"#   --------------------------------------------\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:198
#, no-wrap
msgid ""
"#   If not otherwise specified, Bash-Array subscripts begin with\n"
"#+  subscript number zero. Literally: [0]\n"
"#   This is called zero-based indexing.\n"
"###\n"
"#   If not otherwise specified, Bash-Arrays are subscript packed\n"
"#+  (sequential subscripts without subscript gaps).\n"
"###\n"
"#   Negative subscripts are not allowed.\n"
"###\n"
"#   Elements of a Bash-Array need not all be of the same type.\n"
"###\n"
"#   Elements of a Bash-Array may be undefined (null reference).\n"
"#       That is, a Bash-Array may be \"subscript sparse.\"\n"
"###\n"
"#   Elements of a Bash-Array may be defined and empty (null contents).\n"
"###\n"
"#   Elements of a Bash-Array may contain:\n"
"#     * A whole number as a signed 32-bit (or larger) integer\n"
"#     * A string\n"
"#     * A string formated so that it appears to be a function name\n"
"#     + with optional arguments\n"
"###\n"
"#   Defined elements of a Bash-Array may be undefined (unset).\n"
"#       That is, a subscript packed Bash-Array may be changed\n"
"#   +   into a subscript sparse Bash-Array.\n"
"###\n"
"#   Elements may be added to a Bash-Array by defining an element\n"
"#+  not previously defined.\n"
"###\n"
"# For these reasons, I have been calling them \"Bash-Arrays\".\n"
"# I'll return to the generic term \"array\" from now on.\n"
"#     -- msz\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:201
#, no-wrap
msgid "echo \"=========================================================\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:205
#, no-wrap
msgid ""
"#  Lines 202 - 334 supplied by Cliff Bamford. (Thanks!)\n"
"#  Demo --- Interaction with Arrays, quoting, IFS, echo, * and @   ---  \n"
"#+ all affect how things work\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:216
#, no-wrap
msgid ""
"ArrayVar[0]='zero'                    # 0 normal\n"
"ArrayVar[1]=one                       # 1 unquoted literal\n"
"ArrayVar[2]='two'                     # 2 normal\n"
"ArrayVar[3]='three'                   # 3 normal\n"
"ArrayVar[4]='I am four'               # 4 normal with spaces\n"
"ArrayVar[5]='five'                    # 5 normal\n"
"unset ArrayVar[6]                     # 6 undefined\n"
"ArrayValue[7]='seven'                 # 7 normal\n"
"ArrayValue[8]=''                      # 8 defined but empty\n"
"ArrayValue[9]='nine'                  # 9 normal\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:231
#, no-wrap
msgid ""
"echo '--- Here is the array we are using for this test'\n"
"echo\n"
"echo \"ArrayVar[0]='zero'             # 0 normal\"\n"
"echo \"ArrayVar[1]=one                # 1 unquoted literal\"\n"
"echo \"ArrayVar[2]='two'              # 2 normal\"\n"
"echo \"ArrayVar[3]='three'            # 3 normal\"\n"
"echo \"ArrayVar[4]='I am four'        # 4 normal with spaces\"\n"
"echo \"ArrayVar[5]='five'             # 5 normal\"\n"
"echo \"unset ArrayVar[6]              # 6 undefined\"\n"
"echo \"ArrayValue[7]='seven'          # 7 normal\"\n"
"echo \"ArrayValue[8]=''               # 8 defined but empty\"\n"
"echo \"ArrayValue[9]='nine'           # 9 normal\"\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:246
#, no-wrap
msgid ""
"echo\n"
"echo '---Case0: No double-quotes, Default IFS of space,tab,newline ---'\n"
"IFS=$'\\x20'$'\\x09'$'\\x0A'            # In exactly this order.\n"
"echo 'Here is: printf %q {${ArrayVar[*]}'\n"
"printf %q ${ArrayVar[*]}\n"
"echo\n"
"echo 'Here is: printf %q {${ArrayVar[@]}'\n"
"printf %q ${ArrayVar[@]}\n"
"echo\n"
"echo 'Here is: echo ${ArrayVar[*]}'\n"
"echo  ${ArrayVar[@]}\n"
"echo 'Here is: echo {${ArrayVar[@]}'\n"
"echo ${ArrayVar[@]}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:261
#, no-wrap
msgid ""
"echo\n"
"echo '---Case1: Within double-quotes - Default IFS of space-tab- \n"
"newline ---'\n"
"IFS=$'\\x20'$'\\x09'$'\\x0A'\t    #  These three bytes,\n"
"echo 'Here is: printf %q \"{${ArrayVar[*]}\"'\n"
"printf %q \"${ArrayVar[*]}\"\n"
"echo\n"
"echo 'Here is: printf %q \"{${ArrayVar[@]}\"'\n"
"printf %q \"${ArrayVar[@]}\"\n"
"echo\n"
"echo 'Here is: echo \"${ArrayVar[*]}\"'\n"
"echo  \"${ArrayVar[@]}\"\n"
"echo 'Here is: echo \"{${ArrayVar[@]}\"'\n"
"echo \"${ArrayVar[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:275
#, no-wrap
msgid ""
"echo\n"
"echo '---Case2: Within double-quotes - IFS is q'\n"
"IFS='q'\n"
"echo 'Here is: printf %q \"{${ArrayVar[*]}\"'\n"
"printf %q \"${ArrayVar[*]}\"\n"
"echo\n"
"echo 'Here is: printf %q \"{${ArrayVar[@]}\"'\n"
"printf %q \"${ArrayVar[@]}\"\n"
"echo\n"
"echo 'Here is: echo \"${ArrayVar[*]}\"'\n"
"echo  \"${ArrayVar[@]}\"\n"
"echo 'Here is: echo \"{${ArrayVar[@]}\"'\n"
"echo \"${ArrayVar[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:289
#, no-wrap
msgid ""
"echo\n"
"echo '---Case3: Within double-quotes - IFS is ^'\n"
"IFS='^'\n"
"echo 'Here is: printf %q \"{${ArrayVar[*]}\"'\n"
"printf %q \"${ArrayVar[*]}\"\n"
"echo\n"
"echo 'Here is: printf %q \"{${ArrayVar[@]}\"'\n"
"printf %q \"${ArrayVar[@]}\"\n"
"echo\n"
"echo 'Here is: echo \"${ArrayVar[*]}\"'\n"
"echo  \"${ArrayVar[@]}\"\n"
"echo 'Here is: echo \"{${ArrayVar[@]}\"'\n"
"echo \"${ArrayVar[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:304
#, no-wrap
msgid ""
"echo\n"
"echo '---Case4: Within double-quotes - IFS is ^ followed by  \n"
"space,tab,newline'\n"
"IFS=$'^'$'\\x20'$'\\x09'$'\\x0A'       # ^ + space tab newline\n"
"echo 'Here is: printf %q \"{${ArrayVar[*]}\"'\n"
"printf %q \"${ArrayVar[*]}\"\n"
"echo\n"
"echo 'Here is: printf %q \"{${ArrayVar[@]}\"'\n"
"printf %q \"${ArrayVar[@]}\"\n"
"echo\n"
"echo 'Here is: echo \"${ArrayVar[*]}\"'\n"
"echo  \"${ArrayVar[@]}\"\n"
"echo 'Here is: echo \"{${ArrayVar[@]}\"'\n"
"echo \"${ArrayVar[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:318
#, no-wrap
msgid ""
"echo\n"
"echo '---Case6: Within double-quotes - IFS set and empty '\n"
"IFS=''\n"
"echo 'Here is: printf %q \"{${ArrayVar[*]}\"'\n"
"printf %q \"${ArrayVar[*]}\"\n"
"echo\n"
"echo 'Here is: printf %q \"{${ArrayVar[@]}\"'\n"
"printf %q \"${ArrayVar[@]}\"\n"
"echo\n"
"echo 'Here is: echo \"${ArrayVar[*]}\"'\n"
"echo  \"${ArrayVar[@]}\"\n"
"echo 'Here is: echo \"{${ArrayVar[@]}\"'\n"
"echo \"${ArrayVar[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:332
#, no-wrap
msgid ""
"echo\n"
"echo '---Case7: Within double-quotes - IFS is unset'\n"
"unset IFS\n"
"echo 'Here is: printf %q \"{${ArrayVar[*]}\"'\n"
"printf %q \"${ArrayVar[*]}\"\n"
"echo\n"
"echo 'Here is: printf %q \"{${ArrayVar[@]}\"'\n"
"printf %q \"${ArrayVar[@]}\"\n"
"echo\n"
"echo 'Here is: echo \"${ArrayVar[*]}\"'\n"
"echo  \"${ArrayVar[@]}\"\n"
"echo 'Here is: echo \"{${ArrayVar[@]}\"'\n"
"echo \"${ArrayVar[@]}\"\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:336
#, no-wrap
msgid ""
"echo\n"
"echo '---End of Cases---'\n"
"echo \"=========================================================\"; echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:342
#, no-wrap
msgid ""
"# Put IFS back to the default.\n"
"# Default is exactly these three bytes.\n"
"IFS=$'\\x20'$'\\x09'$'\\x0A'           # In exactly this order.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:350
#, no-wrap
msgid ""
"# Interpretation of the above outputs:\n"
"#   A Glob-Pattern is I/O; the setting of IFS matters.\n"
"###\n"
"#   An All-Elements-Of does not consider IFS settings.\n"
"###\n"
"#   Note the different output using the echo command and the\n"
"#+  quoted format operator of the printf command.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:363
#, no-wrap
msgid ""
"#  Recall:\n"
"#   Parameters are similar to arrays and have the similar behaviors.\n"
"###\n"
"#  The above examples demonstrate the possible variations.\n"
"#  To retain the shape of a sparse array, additional script\n"
"#+ programming is required.\n"
"###\n"
"#  The source code of Bash has a routine to output the\n"
"#+ [subscript]=value   array assignment format.\n"
"#  As of version 2.05b, that routine is not used,\n"
"#+ but that might change in future releases.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:370
#, no-wrap
msgid ""
"# The length of a string, measured in non-null elements (characters):\n"
"echo\n"
"echo '- - Non-quoted references - -'\n"
"echo 'Non-Null character count: '${#VarSomething}' characters.'\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:373
#, no-wrap
msgid ""
"# test='Lit'$'\\x00''eral'           # $'\\x00' is a null character.\n"
"# echo ${#test}                     # See that?\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:386
#, no-wrap
msgid ""
"#  The length of an array, measured in defined elements,\n"
"#+ including null content elements.\n"
"echo\n"
"echo 'Defined content count: '${#ArrayVar[@]}' elements.'\n"
"# That is NOT the maximum subscript (4).\n"
"# That is NOT the range of the subscripts (1 . . 4 inclusive).\n"
"# It IS the length of the linked list.\n"
"###\n"
"#  Both the maximum subscript and the range of the subscripts may\n"
"#+ be found with additional script programming.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:391
#, no-wrap
msgid ""
"# The length of a string, measured in non-null elements (characters):\n"
"echo\n"
"echo '- - Quoted, Glob-Pattern references - -'\n"
"echo 'Non-Null character count: '\"${#VarSomething}\"' characters.'\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:396
#, no-wrap
msgid ""
"#  The length of an array, measured in defined elements,\n"
"#+ including null-content elements.\n"
"echo\n"
"echo 'Defined element count: '\"${#ArrayVar[*]}\"' elements.'\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:401
#, no-wrap
msgid ""
"#  Interpretation: Substitution does not effect the ${# ... } operation.\n"
"#  Suggestion:\n"
"#  Always use the All-Elements-Of character\n"
"#+ if that is what is intended (independence from IFS).\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:415
#, no-wrap
msgid ""
"#  Define a simple function.\n"
"#  I include an underscore in the name\n"
"#+ to make it distinctive in the examples below.\n"
"###\n"
"#  Bash separates variable names and function names\n"
"#+ in different namespaces.\n"
"#  The Mark-One eyeball isn't that advanced.\n"
"###\n"
"_simple() {\n"
"    echo -n 'SimpleFunc'$@          #  Newlines are swallowed in\n"
"}                                   #+ result returned in any case.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:419
#, no-wrap
msgid ""
"# The ( ... ) notation invokes a command or function.\n"
"# The $( ... ) notation is pronounced: Result-Of.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:429
#, no-wrap
msgid ""
"# Invoke the function _simple\n"
"echo\n"
"echo '- - Output of function _simple - -'\n"
"_simple                             # Try passing arguments.\n"
"echo\n"
"# or\n"
"(_simple)                           # Try passing arguments.\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:432
#, no-wrap
msgid ""
"echo '- Is there a variable of that name? -'\n"
"echo $_simple not defined           # No variable by that name.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:434
#, no-wrap
msgid "# Invoke the result of function _simple (Error msg intended)\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:439
#, no-wrap
msgid ""
"###\n"
"$(_simple)                          # Gives an error message:\n"
"#                          line 436: SimpleFunc: command not found\n"
"#                          ---------------------------------------\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:442
#, no-wrap
msgid ""
"echo\n"
"###\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:450
#, no-wrap
msgid ""
"#  The first word of the result of function _simple\n"
"#+ is neither a valid Bash command nor the name of a defined function.\n"
"###\n"
"# This demonstrates that the output of _simple is subject to evaluation.\n"
"###\n"
"# Interpretation:\n"
"#   A function can be used to generate in-line Bash commands.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:457
#, no-wrap
msgid ""
"# A simple function where the first word of result IS a bash command:\n"
"###\n"
"_print() {\n"
"    echo -n 'printf %q '$@\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:461
#, no-wrap
msgid ""
"echo '- - Outputs of function _print - -'\n"
"_print parm1 parm2                  # An Output NOT A Command.\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:466
#, no-wrap
msgid ""
"$(_print parm1 parm2)               #  Executes: printf %q parm1 parm2\n"
"                                    #  See above IFS examples for the\n"
"                                    #+ various possibilities.\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:469
#, no-wrap
msgid ""
"$(_print $VarSomething)             # The predictable result.\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:474
#, no-wrap
msgid ""
"# Function variables\n"
"# ------------------\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:479
#, no-wrap
msgid ""
"echo\n"
"echo '- - Function variables - -'\n"
"# A variable may represent a signed integer, a string or an array.\n"
"# A string may be used like a function name with optional arguments.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:482
#, no-wrap
msgid ""
"# set -vx                           #  Enable if desired\n"
"declare -f funcVar                  #+ in namespace of functions\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:486
#, no-wrap
msgid ""
"funcVar=_print                      # Contains name of function.\n"
"$funcVar parm1                      # Same as _print at this point.\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:491
#, no-wrap
msgid ""
"funcVar=$(_print )                  # Contains result of function.\n"
"$funcVar                            # No input, No output.\n"
"$funcVar $VarSomething              # The predictable result.\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:495
#, no-wrap
msgid ""
"funcVar=$(_print $VarSomething)     #  $VarSomething replaced HERE.\n"
"$funcVar                            #  The expansion is part of the\n"
"echo                                #+ variable contents.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:499
#, no-wrap
msgid ""
"funcVar=\"$(_print $VarSomething)\"   #  $VarSomething replaced HERE.\n"
"$funcVar                            #  The expansion is part of the\n"
"echo                                #+ variable contents.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:504
#, no-wrap
msgid ""
"#  The difference between the unquoted and the double-quoted versions\n"
"#+ above can be seen in the \"protect_literal.sh\" example.\n"
"#  The first case above is processed as two, unquoted, Bash-Words.\n"
"#  The second case above is processed as one, quoted, Bash-Word.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:510
#, no-wrap
msgid ""
"# Delayed replacement\n"
"# -------------------\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:516
#, no-wrap
msgid ""
"echo\n"
"echo '- - Delayed replacement - -'\n"
"funcVar=\"$(_print '$VarSomething')\" # No replacement, single Bash-Word.\n"
"eval $funcVar                       # $VarSomething replaced HERE.\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:520
#, no-wrap
msgid ""
"VarSomething='NewThing'\n"
"eval $funcVar                       # $VarSomething replaced HERE.\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:523
#, no-wrap
msgid ""
"# Restore the original setting trashed above.\n"
"VarSomething=Literal\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:528
#, no-wrap
msgid ""
"#  There are a pair of functions demonstrated in the\n"
"#+ \"protect_literal.sh\" and \"unprotect_literal.sh\" examples.\n"
"#  These are general purpose functions for delayed replacement literals\n"
"#+ containing variables.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:535
#, no-wrap
msgid ""
"# REVIEW:\n"
"# ------\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:561
#, no-wrap
msgid ""
"#  A string can be considered a Classic-Array of elements (characters).\n"
"#  A string operation applies to all elements (characters) of the string\n"
"#+ (in concept, anyway).\n"
"###\n"
"#  The notation: ${array_name[@]} represents all elements of the\n"
"#+ Bash-Array: array_name.\n"
"###\n"
"#  The Extended-Syntax string operations can be applied to all\n"
"#+ elements of an array.\n"
"###\n"
"#  This may be thought of as a For-Each operation on a vector of strings.\n"
"###\n"
"#  Parameters are similar to an array.\n"
"#  The initialization of a parameter array for a script\n"
"#+ and a parameter array for a function only differ\n"
"#+ in the initialization of ${0}, which never changes its setting.\n"
"###\n"
"#  Subscript zero of the script's parameter array contains\n"
"#+ the name of the script.\n"
"###\n"
"#  Subscript zero of a function's parameter array DOES NOT contain\n"
"#+ the name of the function.\n"
"#  The name of the current function is accessed by the $FUNCNAME variable.\n"
"###\n"
"#  A quick, review list follows (quick, not short).\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:569
#, no-wrap
msgid ""
"echo\n"
"echo '- - Test (but not change) - -'\n"
"echo '- null reference -'\n"
"echo -n ${VarNull-'NotSet'}' '          # NotSet\n"
"echo ${VarNull}                         # NewLine only\n"
"echo -n ${VarNull:-'NotSet'}' '         # NotSet\n"
"echo ${VarNull}                         # Newline only\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:575
#, no-wrap
msgid ""
"echo '- null contents -'\n"
"echo -n ${VarEmpty-'Empty'}' '          # Only the space\n"
"echo ${VarEmpty}                        # Newline only\n"
"echo -n ${VarEmpty:-'Empty'}' '         # Empty\n"
"echo ${VarEmpty}                        # Newline only\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:579
#, no-wrap
msgid ""
"echo '- contents -'\n"
"echo ${VarSomething-'Content'}          # Literal\n"
"echo ${VarSomething:-'Content'}         # Literal\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:582
#, no-wrap
msgid ""
"echo '- Sparse Array -'\n"
"echo ${ArrayVar[@]-'not set'}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:589
#, no-wrap
msgid ""
"# ASCII-Art time\n"
"# State     Y==yes, N==no\n"
"#           -       :-\n"
"# Unset     Y       Y       ${# ... } == 0\n"
"# Empty     N       Y       ${# ... } == 0\n"
"# Contents  N       N       ${# ... } > 0\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:598
#, no-wrap
msgid ""
"#  Either the first and/or the second part of the tests\n"
"#+ may be a command or a function invocation string.\n"
"echo\n"
"echo '- - Test 1 for undefined - -'\n"
"declare -i t\n"
"_decT() {\n"
"    t=$t-1\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:603
#, no-wrap
msgid ""
"# Null reference, set: t == -1\n"
"t=${#VarNull}                           # Results in zero.\n"
"${VarNull- _decT }                      # Function executes, t now -1.\n"
"echo $t\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:608
#, no-wrap
msgid ""
"# Null contents, set: t == 0\n"
"t=${#VarEmpty}                          # Results in zero.\n"
"${VarEmpty- _decT }                     # _decT function NOT executed.\n"
"echo $t\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:614
#, no-wrap
msgid ""
"# Contents, set: t == number of non-null characters\n"
"VarSomething='_simple'                  # Set to valid function name.\n"
"t=${#VarSomething}                      # non-zero length\n"
"${VarSomething- _decT }                 # Function _simple executed.\n"
"echo $t                                 # Note the Append-To action.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:619
#, no-wrap
msgid ""
"# Exercise: clean up that example.\n"
"unset t\n"
"unset _decT\n"
"VarSomething=Literal\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:626
#, no-wrap
msgid ""
"echo\n"
"echo '- - Test and Change - -'\n"
"echo '- Assignment if null reference -'\n"
"echo -n ${VarNull='NotSet'}' '          # NotSet NotSet\n"
"echo ${VarNull}\n"
"unset VarNull\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:631
#, no-wrap
msgid ""
"echo '- Assignment if null reference -'\n"
"echo -n ${VarNull:='NotSet'}' '         # NotSet NotSet\n"
"echo ${VarNull}\n"
"unset VarNull\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:636
#, no-wrap
msgid ""
"echo '- No assignment if null contents -'\n"
"echo -n ${VarEmpty='Empty'}' '          # Space only\n"
"echo ${VarEmpty}\n"
"VarEmpty=''\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:641
#, no-wrap
msgid ""
"echo '- Assignment if null contents -'\n"
"echo -n ${VarEmpty:='Empty'}' '         # Empty Empty\n"
"echo ${VarEmpty}\n"
"VarEmpty=''\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:645
#, no-wrap
msgid ""
"echo '- No change if already has contents -'\n"
"echo ${VarSomething='Content'}          # Literal\n"
"echo ${VarSomething:='Content'}         # Literal\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:659
#, no-wrap
msgid ""
"# \"Subscript sparse\" Bash-Arrays\n"
"###\n"
"#  Bash-Arrays are subscript packed, beginning with\n"
"#+ subscript zero unless otherwise specified.\n"
"###\n"
"#  The initialization of ArrayVar was one way\n"
"#+ to \"otherwise specify\".  Here is the other way:\n"
"###\n"
"echo\n"
"declare -a ArraySparse\n"
"ArraySparse=( [1]=one [2]='' [4]='four' )\n"
"# [0]=null reference, [2]=null content, [3]=null reference\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:662
#, no-wrap
msgid ""
"echo '- - Array-Sparse List - -'\n"
"# Within double-quotes, default IFS, Glob-Pattern\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:666
#, no-wrap
msgid ""
"IFS=$'\\x20'$'\\x09'$'\\x0A'\n"
"printf %q \"${ArraySparse[*]}\"\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:676
#, no-wrap
msgid ""
"#  Note that the output does not distinguish between \"null content\"\n"
"#+ and \"null reference\".\n"
"#  Both print as escaped whitespace.\n"
"###\n"
"#  Note also that the output does NOT contain escaped whitespace\n"
"#+ for the \"null reference(s)\" prior to the first defined element.\n"
"###\n"
"# This behavior of 2.04, 2.05a and 2.05b has been reported\n"
"#+ and may change in a future version of Bash.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:691
#, no-wrap
msgid ""
"#  To output a sparse array and maintain the [subscript]=value\n"
"#+ relationship without change requires a bit of programming.\n"
"#  One possible code fragment:\n"
"###\n"
"# local l=${#ArraySparse[@]}        # Count of defined elements\n"
"# local f=0                         # Count of found subscripts\n"
"# local i=0                         # Subscript to test\n"
"(                                   # Anonymous in-line function\n"
"    for (( l=${#ArraySparse[@]}, f = 0, i = 0 ; f &lt; l ; i++ ))\n"
"    do\n"
"        # 'if defined then...'\n"
"        ${ArraySparse[$i]+ eval echo '\\ ['$i']='${ArraySparse[$i]} ; (( f++ )) }\n"
"    done\n"
")\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:706
#, no-wrap
msgid ""
"# The reader coming upon the above code fragment cold\n"
"#+ might want to review \"command lists\" and \"multiple commands on a line\"\n"
"#+ in the text of the foregoing \"Advanced Bash Scripting Guide.\"\n"
"###\n"
"#  Note:\n"
"#  The \"read -a array_name\" version of the \"read\" command\n"
"#+ begins filling array_name at subscript zero.\n"
"#  ArraySparse does not define a value at subscript zero.\n"
"###\n"
"#  The user needing to read/write a sparse array to either\n"
"#+ external storage or a communications socket must invent\n"
"#+ a read/write code pair suitable for their purpose.\n"
"###\n"
"# Exercise: clean it up.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:708
#, no-wrap
msgid "unset ArraySparse\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:715
#, no-wrap
msgid ""
"echo\n"
"echo '- - Conditional alternate (But not change)- -'\n"
"echo '- No alternate if null reference -'\n"
"echo -n ${VarNull+'NotSet'}' '\n"
"echo ${VarNull}\n"
"unset VarNull\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:720
#, no-wrap
msgid ""
"echo '- No alternate if null reference -'\n"
"echo -n ${VarNull:+'NotSet'}' '\n"
"echo ${VarNull}\n"
"unset VarNull\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:725
#, no-wrap
msgid ""
"echo '- Alternate if null contents -'\n"
"echo -n ${VarEmpty+'Empty'}' '              # Empty\n"
"echo ${VarEmpty}\n"
"VarEmpty=''\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:730
#, no-wrap
msgid ""
"echo '- No alternate if null contents -'\n"
"echo -n ${VarEmpty:+'Empty'}' '             # Space only\n"
"echo ${VarEmpty}\n"
"VarEmpty=''\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:732
#, no-wrap
msgid "echo '- Alternate if already has contents -'\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:736
#, no-wrap
msgid ""
"# Alternate literal\n"
"echo -n ${VarSomething+'Content'}' '        # Content Literal\n"
"echo ${VarSomething}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:741
#, no-wrap
msgid ""
"# Invoke function\n"
"echo -n ${VarSomething:+ $(_simple) }' '    # SimpleFunc Literal\n"
"echo ${VarSomething}\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:745
#, no-wrap
msgid ""
"echo '- - Sparse Array - -'\n"
"echo ${ArrayVar[@]+'Empty'}                 # An array of 'Empty'(ies)\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:747
#, no-wrap
msgid "echo '- - Test 2 for undefined - -'\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:752
#, no-wrap
msgid ""
"declare -i t\n"
"_incT() {\n"
"    t=$t+1\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:756
#, no-wrap
msgid ""
"#  Note:\n"
"#  This is the same test used in the sparse array\n"
"#+ listing code fragment.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:761
#, no-wrap
msgid ""
"# Null reference, set: t == -1\n"
"t=${#VarNull}-1                     # Results in minus-one.\n"
"${VarNull+ _incT }                  # Does not execute.\n"
"echo $t' Null reference'\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:766
#, no-wrap
msgid ""
"# Null contents, set: t == 0\n"
"t=${#VarEmpty}-1                    # Results in minus-one.\n"
"${VarEmpty+ _incT }                 # Executes.\n"
"echo $t'  Null content'\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:771
#, no-wrap
msgid ""
"# Contents, set: t == (number of non-null characters)\n"
"t=${#VarSomething}-1                # non-null length minus-one\n"
"${VarSomething+ _incT }             # Executes.\n"
"echo $t'  Contents'\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:775
#, no-wrap
msgid ""
"# Exercise: clean up that example.\n"
"unset t\n"
"unset _incT\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:783
#, no-wrap
msgid ""
"# ${name?err_msg} ${name:?err_msg}\n"
"#  These follow the same rules but always exit afterwards\n"
"#+ if an action is specified following the question mark.\n"
"#  The action following the question mark may be a literal\n"
"#+ or a function result.\n"
"###\n"
"#  ${name?} ${name:?} are test-only, the return can be tested.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:789
#, no-wrap
msgid ""
"# Element operations\n"
"# ------------------\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:792
#, no-wrap
msgid ""
"echo\n"
"echo '- - Trailing sub-element selection - -'\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:794
#, no-wrap
msgid "#  Strings, Arrays and Positional parameters\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:797
#, no-wrap
msgid ""
"#  Call this script with multiple arguments\n"
"#+ to see the parameter selections.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:803
#, no-wrap
msgid ""
"echo '- All -'\n"
"echo ${VarSomething:0}              # all non-null characters\n"
"echo ${ArrayVar[@]:0}               # all elements with content\n"
"echo ${@:0}                         # all parameters with content;\n"
"                                    # ignoring parameter[0]\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:809
#, no-wrap
msgid ""
"echo\n"
"echo '- All after -'\n"
"echo ${VarSomething:1}              # all non-null after character[0]\n"
"echo ${ArrayVar[@]:1}               # all after element[0] with content\n"
"echo ${@:2}                         # all after param[1] with content\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:815
#, no-wrap
msgid ""
"echo\n"
"echo '- Range after -'\n"
"echo ${VarSomething:4:3}            # ral\n"
"                                    # Three characters after\n"
"                                    # character[3]\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:825
#, no-wrap
msgid ""
"echo '- Sparse array gotch -'\n"
"echo ${ArrayVar[@]:1:2}     #  four - The only element with content.\n"
"                            #  Two elements after (if that many exist).\n"
"                            #  the FIRST WITH CONTENTS\n"
"                            #+ (the FIRST WITH  CONTENTS is being\n"
"                            #+ considered as if it\n"
"                            #+ were subscript zero).\n"
"#  Executed as if Bash considers ONLY array elements with CONTENT\n"
"#  printf %q \"${ArrayVar[@]:0:3}\"    # Try this one\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:830
#, no-wrap
msgid ""
"#  In versions 2.04, 2.05a and 2.05b,\n"
"#+ Bash does not handle sparse arrays as expected using this notation.\n"
"#\n"
"#  The current Bash maintainer, Chet Ramey, has corrected this.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:834
#, no-wrap
msgid ""
"echo '- Non-sparse array -'\n"
"echo ${@:2:2}               # Two parameters following parameter[1]\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:839
#, no-wrap
msgid ""
"# New victims for string vector examples:\n"
"stringZ=abcABC123ABCabc\n"
"arrayZ=( abcabc ABCABC 123123 ABCABC abcabc )\n"
"sparseZ=( [1]='abcabc' [3]='ABCABC' [4]='' [5]='123123' )\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:847
#, no-wrap
msgid ""
"echo\n"
"echo ' - - Victim string - -'$stringZ'- - '\n"
"echo ' - - Victim array - -'${arrayZ[@]}'- - '\n"
"echo ' - - Sparse array - -'${sparseZ[@]}'- - '\n"
"echo ' - [0]==null ref, [2]==null ref, [4]==null content - '\n"
"echo ' - [1]=abcabc [3]=ABCABC [5]=123123 - '\n"
"echo ' - non-null-reference count: '${#sparseZ[@]}' elements'\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:853
#, no-wrap
msgid ""
"echo\n"
"echo '- - Prefix sub-element removal - -'\n"
"echo '- - Glob-Pattern match must include the first character. - -'\n"
"echo '- - Glob-Pattern may be a literal or a function result. - -'\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:859
#, no-wrap
msgid ""
"# Function returning a simple, Literal, Glob-Pattern\n"
"_abc() {\n"
"    echo -n 'abc'\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:864
#, no-wrap
msgid ""
"echo '- Shortest prefix -'\n"
"echo ${stringZ#123}                 # Unchanged (not a prefix).\n"
"echo ${stringZ#$(_abc)}             # ABC123ABCabc\n"
"echo ${arrayZ[@]#abc}               # Applied to each element.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:867
#, no-wrap
msgid ""
"# echo ${sparseZ[@]#abc}            # Version-2.05b core dumps.\n"
"# Has since been fixed by Chet Ramey.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:870
#, no-wrap
msgid ""
"# The -it would be nice- First-Subscript-Of\n"
"# echo ${#sparseZ[@]#*}             # This is NOT valid Bash.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:876
#, no-wrap
msgid ""
"echo\n"
"echo '- Longest prefix -'\n"
"echo ${stringZ##1*3}                # Unchanged (not a prefix)\n"
"echo ${stringZ##a*C}                # abc\n"
"echo ${arrayZ[@]##a*c}              # ABCABC 123123 ABCABC\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:879
#, no-wrap
msgid ""
"# echo ${sparseZ[@]##a*c}           # Version-2.05b core dumps.\n"
"# Has since been fixed by Chet Ramey.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:889
#, no-wrap
msgid ""
"echo\n"
"echo '- - Suffix sub-element removal - -'\n"
"echo '- - Glob-Pattern match must include the last character. - -'\n"
"echo '- - Glob-Pattern may be a literal or a function result. - -'\n"
"echo\n"
"echo '- Shortest suffix -'\n"
"echo ${stringZ%1*3}                 # Unchanged (not a suffix).\n"
"echo ${stringZ%$(_abc)}             # abcABC123ABC\n"
"echo ${arrayZ[@]%abc}               # Applied to each element.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:892
#, no-wrap
msgid ""
"# echo ${sparseZ[@]%abc}            # Version-2.05b core dumps.\n"
"# Has since been fixed by Chet Ramey.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:895
#, no-wrap
msgid ""
"# The -it would be nice- Last-Subscript-Of\n"
"# echo ${#sparseZ[@]%*}             # This is NOT valid Bash.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:901
#, no-wrap
msgid ""
"echo\n"
"echo '- Longest suffix -'\n"
"echo ${stringZ%%1*3}                # Unchanged (not a suffix)\n"
"echo ${stringZ%%b*c}                # a\n"
"echo ${arrayZ[@]%%b*c}              # a ABCABC 123123 ABCABC a\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:904
#, no-wrap
msgid ""
"# echo ${sparseZ[@]%%b*c}           # Version-2.05b core dumps.\n"
"# Has since been fixed by Chet Ramey.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:914
#, no-wrap
msgid ""
"echo\n"
"echo '- - Sub-element replacement - -'\n"
"echo '- - Sub-element at any location in string. - -'\n"
"echo '- - First specification is a Glob-Pattern - -'\n"
"echo '- - Glob-Pattern may be a literal or Glob-Pattern function result. - -'\n"
"echo '- - Second specification may be a literal or function result. - -'\n"
"echo '- - Second specification may be unspecified. Pronounce that'\n"
"echo '    as: Replace-With-Nothing (Delete) - -'\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:921
#, no-wrap
msgid ""
"# Function returning a simple, Literal, Glob-Pattern\n"
"_123() {\n"
"    echo -n '123'\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:927
#, no-wrap
msgid ""
"echo '- Replace first occurrence -'\n"
"echo ${stringZ/$(_123)/999}         # Changed (123 is a component).\n"
"echo ${stringZ/ABC/xyz}             # xyzABC123ABCabc\n"
"echo ${arrayZ[@]/ABC/xyz}           # Applied to each element.\n"
"echo ${sparseZ[@]/ABC/xyz}          # Works as expected.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:934
#, no-wrap
msgid ""
"echo\n"
"echo '- Delete first occurrence -'\n"
"echo ${stringZ/$(_123)/}\n"
"echo ${stringZ/ABC/}\n"
"echo ${arrayZ[@]/ABC/}\n"
"echo ${sparseZ[@]/ABC/}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:943
#, no-wrap
msgid ""
"#  The replacement need not be a literal,\n"
"#+ since the result of a function invocation is allowed.\n"
"#  This is general to all forms of replacement.\n"
"echo\n"
"echo '- Replace first occurrence with Result-Of -'\n"
"echo ${stringZ/$(_123)/$(_simple)}  # Works as expected.\n"
"echo ${arrayZ[@]/ca/$(_simple)}     # Applied to each element.\n"
"echo ${sparseZ[@]/ca/$(_simple)}    # Works as expected.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:950
#, no-wrap
msgid ""
"echo\n"
"echo '- Replace all occurrences -'\n"
"echo ${stringZ//[b2]/X}             # X-out b's and 2's\n"
"echo ${stringZ//abc/xyz}            # xyzABC123ABCxyz\n"
"echo ${arrayZ[@]//abc/xyz}          # Applied to each element.\n"
"echo ${sparseZ[@]//abc/xyz}         # Works as expected.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:957
#, no-wrap
msgid ""
"echo\n"
"echo '- Delete all occurrences -'\n"
"echo ${stringZ//[b2]/}\n"
"echo ${stringZ//abc/}\n"
"echo ${arrayZ[@]//abc/}\n"
"echo ${sparseZ[@]//abc/}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:962
#, no-wrap
msgid ""
"echo\n"
"echo '- - Prefix sub-element replacement - -'\n"
"echo '- - Match must include the first character. - -'\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:968
#, no-wrap
msgid ""
"echo '- Replace prefix occurrences -'\n"
"echo ${stringZ/#[b2]/X}             # Unchanged (neither is a prefix).\n"
"echo ${stringZ/#$(_abc)/XYZ}        # XYZABC123ABCabc\n"
"echo ${arrayZ[@]/#abc/XYZ}          # Applied to each element.\n"
"echo ${sparseZ[@]/#abc/XYZ}         # Works as expected.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:975
#, no-wrap
msgid ""
"echo\n"
"echo '- Delete prefix occurrences -'\n"
"echo ${stringZ/#[b2]/}\n"
"echo ${stringZ/#$(_abc)/}\n"
"echo ${arrayZ[@]/#abc/}\n"
"echo ${sparseZ[@]/#abc/}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:980
#, no-wrap
msgid ""
"echo\n"
"echo '- - Suffix sub-element replacement - -'\n"
"echo '- - Match must include the last character. - -'\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:986
#, no-wrap
msgid ""
"echo '- Replace suffix occurrences -'\n"
"echo ${stringZ/%[b2]/X}             # Unchanged (neither is a suffix).\n"
"echo ${stringZ/%$(_abc)/XYZ}        # abcABC123ABCXYZ\n"
"echo ${arrayZ[@]/%abc/XYZ}          # Applied to each element.\n"
"echo ${sparseZ[@]/%abc/XYZ}         # Works as expected.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:993
#, no-wrap
msgid ""
"echo\n"
"echo '- Delete suffix occurrences -'\n"
"echo ${stringZ/%[b2]/}\n"
"echo ${stringZ/%$(_abc)/}\n"
"echo ${arrayZ[@]/%abc/}\n"
"echo ${sparseZ[@]/%abc/}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:997
#, no-wrap
msgid ""
"echo\n"
"echo '- - Special cases of null Glob-Pattern - -'\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:1004
#, no-wrap
msgid ""
"echo '- Prefix all -'\n"
"# null substring pattern means 'prefix'\n"
"echo ${stringZ/#/NEW}               # NEWabcABC123ABCabc\n"
"echo ${arrayZ[@]/#/NEW}             # Applied to each element.\n"
"echo ${sparseZ[@]/#/NEW}            # Applied to null-content also.\n"
"                                    # That seems reasonable.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:1012
#, no-wrap
msgid ""
"echo\n"
"echo '- Suffix all -'\n"
"# null substring pattern means 'suffix'\n"
"echo ${stringZ/%/NEW}               # abcABC123ABCabcNEW\n"
"echo ${arrayZ[@]/%/NEW}             # Applied to each element.\n"
"echo ${sparseZ[@]/%/NEW}            # Applied to null-content also.\n"
"                                    # That seems reasonable.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:1017
#, no-wrap
msgid ""
"echo\n"
"echo '- - Special case For-Each Glob-Pattern - -'\n"
"echo '- - - - This is a nice-to-have dream - - - -'\n"
"echo\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:1022
#, no-wrap
msgid ""
"_GenFunc() {\n"
"    echo -n ${0}                    # Illustration only.\n"
"    # Actually, that would be an arbitrary computation.\n"
"}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:1027
#, no-wrap
msgid ""
"# All occurrences, matching the AnyThing pattern.\n"
"# Currently //*/ does not match null-content nor null-reference.\n"
"# /#/ and /%/ does match null-content but not null-reference.\n"
"echo ${sparseZ[@]//*/$(_GenFunc)}\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:1038
#, no-wrap
msgid ""
"#  A possible syntax would be to make\n"
"#+ the parameter notation used within this construct mean:\n"
"#   ${1} - The full element\n"
"#   ${2} - The prefix, if any, to the matched sub-element\n"
"#   ${3} - The matched sub-element\n"
"#   ${4} - The suffix, if any, to the matched sub-element\n"
"#\n"
"# echo ${sparseZ[@]//*/$(_GenFunc ${3})}   # Same as ${1} here.\n"
"# Perhaps it will be implemented in a future version of Bash.\n"
msgstr ""

#. type: Plain text
#: abs-guide/basics-reviewed.bash:1040
#, no-wrap
msgid "exit 0\n"
msgstr ""
