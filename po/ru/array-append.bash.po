# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-07-06 22:37+0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: abs-guide/array-append.bash:3
msgid "#! /bin/bash # array-append.bash"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:9
msgid ""
"# Copyright (c) Michael S. Zick, 2003, All rights reserved.  # License: "
"Unrestricted reuse in any form, for any purpose.  # Version: $ID$ # # "
"Slightly modified in formatting by M.C."
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:13
msgid ""
"# Array operations are Bash-specific.  # Legacy UNIX /bin/sh lacks "
"equivalents."
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:18
msgid ""
"# Pipe the output of this script to 'more' #+ so it doesn't scroll off the "
"terminal.  # Or, redirect output to a file."
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:24
msgid ""
"declare -a array1=( zero1 one1 two1 )  # Subscript packed.  declare -a "
"array2=( [0]=zero2 [2]=two2 [3]=three2 )  # Subscript sparse -- [1] is not "
"defined."
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:33
#, no-wrap
msgid ""
"echo\n"
"echo '- Confirm that the array is really subscript sparse. -'\n"
"echo \"Number of elements: 4\"        # Hard-coded for illustration.\n"
"for (( i = 0 ; i &lt; 4 ; i++ ))\n"
"do\n"
"    echo \"Element [$i]: ${array2[$i]}\"\n"
"done\n"
"# See also the more general code example in basics-reviewed.bash.\n"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:36
msgid "declare -a dest"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:42
msgid ""
"# Combine (append) two arrays into a third array.  echo echo 'Conditions: "
"Unquoted, default IFS, All-Elements-Of operator' echo '- Undefined elements "
"not present, subscripts not maintained. -' # # The undefined elements do not "
"exist; they are not being dropped."
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:45
#, no-wrap
msgid ""
"dest=( ${array1[@]} ${array2[@]} )\n"
"# dest=${array1[@]}${array2[@]}     # Strange results, possibly a bug.\n"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:50
msgid ""
"# Now, list the result.  echo echo '- - Testing Array Append - -' "
"cnt=${#dest[@]}"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:56 abs-guide/array-append.bash:71
#, no-wrap
msgid ""
"echo \"Number of elements: $cnt\"\n"
"for (( i = 0 ; i &lt; cnt ; i++ ))\n"
"do\n"
"    echo \"Element [$i]: ${dest[$i]}\"\n"
"done\n"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:60
msgid ""
"# Assign an array to a single array element (twice).  dest[0]=${array1[@]} "
"dest[1]=${array2[@]}"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:65
msgid ""
"# List the result.  echo echo '- - Testing modified array - -' "
"cnt=${#dest[@]}"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:75
msgid ""
"# Examine the modified second element.  echo echo '- - Reassign and list "
"second element - -'"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:78
msgid "declare -a subArray=${dest[1]} cnt=${#subArray[@]}"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:84
#, no-wrap
msgid ""
"echo \"Number of elements: $cnt\"\n"
"for (( i = 0 ; i &lt; cnt ; i++ ))\n"
"do\n"
"    echo \"Element [$i]: ${subArray[$i]}\"\n"
"done\n"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:89
msgid ""
"# The assignment of an entire array to a single element #+ of another array "
"using the '=${ ... }' array assignment #+ has converted the array being "
"assigned into a string, #+ with the elements separated by a space (the first "
"character of IFS)."
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:93
msgid ""
"# If the original elements didn't contain whitespace . . .  # If the "
"original array isn't subscript sparse . . .  # Then we could get the "
"original array structure back again."
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:97
msgid ""
"# Restore from the modified second element.  echo echo '- - Listing restored "
"element - -'"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:100
msgid "declare -a subArray=( ${dest[1]} )  cnt=${#subArray[@]}"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:109
#, no-wrap
msgid ""
"echo \"Number of elements: $cnt\"\n"
"for (( i = 0 ; i &lt; cnt ; i++ ))\n"
"do\n"
"    echo \"Element [$i]: ${subArray[$i]}\"\n"
"done\n"
"echo '- - Do not depend on this behavior. - -'\n"
"echo '- - This behavior is subject to change - -'\n"
"echo '- - in versions of Bash newer than version 2.05b - -'\n"
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:111
msgid "# MSZ: Sorry about any earlier confusion folks."
msgstr ""

#. type: Plain text
#: abs-guide/array-append.bash:112
msgid "exit 0"
msgstr ""
